rm(list=ls())#
library(oro.dicom)#
library(bitops)#
library(arules)#
username <- Sys.info()["user"][[1]]#
basedir <- file.path("/Users", username, "Dropbox/CTR/DHanley/CT_Registration/Brain_Seg_Rerun")#
#basedir <- file.path("/Volumes/CT_Data/MISTIE")#
#
setwd(basedir)#
#
addon <- function(x, add){#
	ss <- strsplit(x, "-")#
	ss <- lapply(ss, gsub, pattern=".dcm", replacement="", fixed=TRUE)#
	ss <- lapply(ss, c, paste(add, ".dcm" ,sep=""))#
	lss <- sapply(ss, length)#
	if (any(lss) == 0) stop("Wrong string type")#
	files <- sapply(ss, paste, sep="", collapse="-")#
	return(files)#
}#
#
files <- dir(path=basedir, pattern="dcm", full.names=TRUE, recursive=TRUE)#
files <- files[!grepl("Sorted", files)]#
paths <- unique(dirname(files))#
#
# paths <- paths[-grep("173-361", paths, fixed=T)]#
#
lpath <- length(paths)#
if (lpath >= 1){#
  for (ipath in 1:length(paths)){#
    path <- paths[ipath]#
    dcms <- list.files(path=path, pattern="dcm")#
    four <- grep(pattern="IM-\\d\\d\\d\\d-\\d\\d\\d\\d-\\d\\d\\d\\d\\.dcm", x=dcms)#
    ns <- unique(as.numeric(sapply(strsplit(dcms, "-"), function(x) x[2])))#
    if (length(ns) > 1) stop(paste(path, "has multi images"))#
    if (length(four) > 0) {#
    	fimgs <- dcms[four]#
    	ss <- strsplit(fimgs, "-")#
    	ss <- lapply(ss, function(x) grep(x, pattern=".dcm", fixed=TRUE, value=TRUE))#
    	lss <- sapply(ss, length)#
    	if (any(lss) == 0) stop(paste(path, "four images are bad"))#
    	ss <- unique(as.numeric(gsub(unlist(ss), pattern=".dcm", replacement="", fixed=TRUE)))#
    	if (length(ss) > 1)	stop(paste(path, "has multiple four images"))#
    }#
  }#
}#
#
#setwd(path)#
#files <- list.files(pattern="IM-0004-\\d\\d\\d\\d\\.dcm")#
#chfiles <- addon(files, "0002")#
#for (ifile in 1:length(files)) system(sprintf("mv %s %s", files[ifile], chfiles[ifile]))#
#
ipath <- 1#
lpath <- length(paths)#
#
goNext <- function(date, time){#
	gonext=FALSE#
	if (length(time) > 0 & length(date) > 0){#
		if (time == "" | date == ""){ #
			gonext=TRUE		#
		}#
	} else {#
		gonext <- TRUE        	#
	}#
	gonext#
}
ipath
lpah
lpath
path <- paths[ipath]#
    system(sprintf('rm "%s"/*.nii.gz', path))
res <- system(sprintf('/Applications/dcm2nii -e N -f N -p N -x N -n Y -g Y "%s"', path))
if (as.logical(res)) stop("Conversion Error")#
    niis <- dir(path=path, pattern=".nii.gz")#
    stub <- unique(substr(niis,1, 13))#
    id <- sub(pattern=".*(\\d\\d\\d-\\d\\d\\d).*", replacement="\\1", x=path)#
    iddir <- file.path(basedir, id)#
    date <- as.numeric(substr(stub, 1, 8))#
    time <- as.numeric(substr(stub, 10, 13))
path <- paths[ipath]#
    system(sprintf('rm "%s"/*.nii.gz', path))#
    res <- system(sprintf('/Applications/dcm2nii -e N -f Y -p N -x N -n Y -g Y "%s"', path))#
    if (as.logical(res)) stop("Conversion Error")#
    niis <- dir(path=path, pattern=".nii.gz")#
    stub <- unique(substr(niis,1, 13))
id <- sub(pattern=".*(\\d\\d\\d-\\d\\d\\d).*", replacement="\\1", x=path)#
    iddir <- file.path(basedir, id)#
    date <- as.numeric(substr(stub, 1, 8))#
    time <- as.numeric(substr(stub, 10, 13))#
    if (time >= 2400){#
      time <- time - 2400#
      time <- sprintf("%04d", time)#
      date <- date+1#
      stub <- paste(date, time, sep='_')		#
    }
if (as.numeric(substr(stub, 1, 4)) < 1990) {#
      dcms <- dir(path=path, pattern="dcm", full.names=TRUE)#
      x <- readDICOM(dcms[1], pixelData=F)#
      x <- x$hdr[[1]]#
   	  	date <- x[x[, "name"] == "StudyDate", "value"]#
      	time <- substr(x[x[, "name"] == "StudyTime", "value"], 1, 4)#
      if (goNext(date, time)) {#
	      date <- x[x[, "name"] == "SeriesDate", "value"]#
	      time <- substr(x[x[, "name"] == "SeriesTime", "value"], 1, 4)     #
      }#
      if (goNext(date, time)) {#
   	  	date <- x[x[, "name"] == "AcquisitionDate", "value"]#
      	time <- substr(x[x[, "name"] == "AcquisitionTime", "value"], 1, 4)         #
      }  #
#       time <- sprintf("%04d", time)      #
      stub <- paste(date, time, sep='_')		#
    }#
    if (grepl("ROIs", x=path)) stub <- paste("ROI", stub, sep="_")
name <- paste(id, stub, sep="_")#
    if (length(niis) > 1){		#
      system(sprintf('FSLDIR=/usr/local/fsl; FSLOUTPUTTYPE=NIFTI_GZ; export FSLDIR FSLOUTPUTTYPE; echo $FSLDIR; sh ${FSLDIR}/etc/fslconf/fsl.sh; /usr/local/fsl/bin/fslmerge -z "%s"/%s.nii.gz "%s"/*.nii.gz', iddir, name, path))#
    }#
    if (length(niis) == 1){#
      system(sprintf('mv "%s"/*.nii.gz "%s"/%s.nii.gz', path, iddir, name))#
    }
path <- paths[ipath]#
    system(sprintf('rm "%s"/*.nii.gz', path))#
    res <- system(sprintf('/Applications/dcm2nii -e N -f Y -p N -x N -n Y -g Y "%s"', path))#
    if (as.logical(res)) stop("Conversion Error")#
    niis <- dir(path=path, pattern=".nii.gz")#
    stub <- unique(substr(niis,1, 13))#
    id <- sub(pattern=".*(\\d\\d\\d-(\\d)\\d\\d\\d).*", replacement="\\1", x=path)#
    iddir <- file.path(basedir, id)#
    date <- as.numeric(substr(stub, 1, 8))#
    time <- as.numeric(substr(stub, 10, 13))#
    if (time >= 2400){#
      time <- time - 2400#
      time <- sprintf("%04d", time)#
      date <- date+1#
      stub <- paste(date, time, sep='_')		#
    }#
    if (as.numeric(substr(stub, 1, 4)) < 1990) {#
      dcms <- dir(path=path, pattern="dcm", full.names=TRUE)#
      x <- readDICOM(dcms[1], pixelData=F)#
      x <- x$hdr[[1]]#
   	  	date <- x[x[, "name"] == "StudyDate", "value"]#
      	time <- substr(x[x[, "name"] == "StudyTime", "value"], 1, 4)#
      if (goNext(date, time)) {#
	      date <- x[x[, "name"] == "SeriesDate", "value"]#
	      time <- substr(x[x[, "name"] == "SeriesTime", "value"], 1, 4)     #
      }#
      if (goNext(date, time)) {#
   	  	date <- x[x[, "name"] == "AcquisitionDate", "value"]#
      	time <- substr(x[x[, "name"] == "AcquisitionTime", "value"], 1, 4)         #
      }  #
#       time <- sprintf("%04d", time)      #
      stub <- paste(date, time, sep='_')		#
    }#
    if (grepl("ROIs", x=path)) stub <- paste("ROI", stub, sep="_")#
    name <- paste(id, stub, sep="_")#
    if (length(niis) > 1){		#
      system(sprintf('FSLDIR=/usr/local/fsl; FSLOUTPUTTYPE=NIFTI_GZ; export FSLDIR FSLOUTPUTTYPE; echo $FSLDIR; sh ${FSLDIR}/etc/fslconf/fsl.sh; /usr/local/fsl/bin/fslmerge -z "%s"/%s.nii.gz "%s"/*.nii.gz', iddir, name, path))#
    }
id
if (length(niis) == 1){#
      system(sprintf('mv "%s"/*.nii.gz "%s"/%s.nii.gz', path, iddir, name))#
    }
iddr
iddir
path <- paths[ipath]#
    system(sprintf('rm "%s"/*.nii.gz', path))#
    res <- system(sprintf('/Applications/dcm2nii -e N -f Y -p N -x N -n Y -g Y "%s"', path))#
    if (as.logical(res)) stop("Conversion Error")#
    niis <- dir(path=path, pattern=".nii.gz")#
    stub <- unique(substr(niis,1, 13))#
    id <- sub(pattern=".*(\\d\\d\\d-(\\d)\\d\\d\\d).*", replacement="\\1", x=path)#
    iddir <- file.path(basedir, id)#
    date <- as.numeric(substr(stub, 1, 8))#
    time <- as.numeric(substr(stub, 10, 13))#
    if (time >= 2400){#
      time <- time - 2400#
      time <- sprintf("%04d", time)#
      date <- date+1#
      stub <- paste(date, time, sep='_')		#
    }#
    if (as.numeric(substr(stub, 1, 4)) < 1990) {#
      dcms <- dir(path=path, pattern="dcm", full.names=TRUE)#
      x <- readDICOM(dcms[1], pixelData=F)#
      x <- x$hdr[[1]]#
   	  	date <- x[x[, "name"] == "StudyDate", "value"]#
      	time <- substr(x[x[, "name"] == "StudyTime", "value"], 1, 4)#
      if (goNext(date, time)) {#
	      date <- x[x[, "name"] == "SeriesDate", "value"]#
	      time <- substr(x[x[, "name"] == "SeriesTime", "value"], 1, 4)     #
      }#
      if (goNext(date, time)) {#
   	  	date <- x[x[, "name"] == "AcquisitionDate", "value"]#
      	time <- substr(x[x[, "name"] == "AcquisitionTime", "value"], 1, 4)         #
      }  #
#       time <- sprintf("%04d", time)      #
      stub <- paste(date, time, sep='_')		#
    }#
    if (grepl("ROIs", x=path)) stub <- paste("ROI", stub, sep="_")#
    name <- paste(id, stub, sep="_")#
    if (length(niis) > 1){		#
      system(sprintf('FSLDIR=/usr/local/fsl; FSLOUTPUTTYPE=NIFTI_GZ; export FSLDIR FSLOUTPUTTYPE; echo $FSLDIR; sh ${FSLDIR}/etc/fslconf/fsl.sh; /usr/local/fsl/bin/fslmerge -z "%s"/%s.nii.gz "%s"/*.nii.gz', iddir, name, path))#
    }#
    system(sprintf('mkdir "%s"', iddir))#
    if (length(niis) == 1){#
      system(sprintf('mv "%s"/*.nii.gz "%s"/%s.nii.gz', path, iddir, name))#
    }
system(sprintf('rm "%s"/*.nii.gz', path))#
    setwd(dirname(path))#
#     stop("me")#
    newpath <- file.path(dirname(path), name)
newpath
date
time
path <- paths[ipath]#
    system(sprintf('rm "%s"/*.nii.gz', path))#
    res <- system(sprintf('/Applications/dcm2nii -e N -f Y -p N -x N -n Y -g Y "%s"', path))#
    if (as.logical(res)) stop("Conversion Error")#
    niis <- dir(path=path, pattern=".nii.gz")#
    stub <- unique(substr(niis,1, 13))#
    id <- sub(pattern=".*(\\d\\d\\d-(\\d)\\d\\d\\d).*", replacement="\\1", x=path)#
    iddir <- file.path(basedir, id)#
    date <- as.numeric(substr(stub, 1, 8))#
    time <- as.numeric(substr(stub, 10, 13))
date
as.Date(date)
?as.Date(date)
?as.Date(date, format="%Y%m%d")
as.Date(date, format="%Y%m%d")
dd <- as.character(date)
as.Date(dd, format="%Y%m%d")
path <- paths[ipath]#
    system(sprintf('rm "%s"/*.nii.gz', path))#
    res <- system(sprintf('/Applications/dcm2nii -e N -f Y -p N -x N -n Y -g Y "%s"', path))#
    if (as.logical(res)) stop("Conversion Error")#
    niis <- dir(path=path, pattern=".nii.gz")#
    stub <- unique(substr(niis,1, 13))#
    id <- sub(pattern=".*(\\d\\d\\d-(\\d)\\d\\d\\d).*", replacement="\\1", x=path)#
    iddir <- file.path(basedir, id)#
    date <- as.numeric(substr(stub, 1, 8))#
    time <- as.numeric(substr(stub, 10, 13))#
#
    if (as.numeric(substr(stub, 1, 4)) < 1990) {#
      dcms <- dir(path=path, pattern="dcm", full.names=TRUE)#
      x <- readDICOM(dcms[1], pixelData=F)#
      x <- x$hdr[[1]]#
   	  	date <- x[x[, "name"] == "StudyDate", "value"]#
      	time <- substr(x[x[, "name"] == "StudyTime", "value"], 1, 4)#
      if (goNext(date, time)) {#
	      date <- x[x[, "name"] == "SeriesDate", "value"]#
	      time <- substr(x[x[, "name"] == "SeriesTime", "value"], 1, 4)     #
      }#
      if (goNext(date, time)) {#
   	  	date <- x[x[, "name"] == "AcquisitionDate", "value"]#
      	time <- substr(x[x[, "name"] == "AcquisitionTime", "value"], 1, 4)         #
      }  #
#       time <- sprintf("%04d", time)      #
    }#
    date <- as.Date(date, format="%Y%m%d")
date <- as.Date(as.character(date), format="%Y%m%d")
date
if (time >= 2400){#
      time <- time - 2400#
      time <- sprintf("%04d", time)#
      date <- date+1#
    }
date
as.character(date)
gsub("-", "", as.character(date))
path <- paths[ipath]#
    system(sprintf('rm "%s"/*.nii.gz', path))#
    res <- system(sprintf('/Applications/dcm2nii -e N -f Y -p N -x N -n Y -g Y "%s"', path))#
    if (as.logical(res)) stop("Conversion Error")#
    niis <- dir(path=path, pattern=".nii.gz")#
    stub <- unique(substr(niis,1, 13))#
    id <- sub(pattern=".*(\\d\\d\\d-(\\d)\\d\\d\\d).*", replacement="\\1", x=path)#
    iddir <- file.path(basedir, id)#
    date <- as.numeric(substr(stub, 1, 8))#
    time <- as.numeric(substr(stub, 10, 13))#
#
    if (as.numeric(substr(stub, 1, 4)) < 1990) {#
      dcms <- dir(path=path, pattern="dcm", full.names=TRUE)#
      x <- readDICOM(dcms[1], pixelData=F)#
      x <- x$hdr[[1]]#
   	  	date <- x[x[, "name"] == "StudyDate", "value"]#
      	time <- substr(x[x[, "name"] == "StudyTime", "value"], 1, 4)#
      if (goNext(date, time)) {#
	      date <- x[x[, "name"] == "SeriesDate", "value"]#
	      time <- substr(x[x[, "name"] == "SeriesTime", "value"], 1, 4)     #
      }#
      if (goNext(date, time)) {#
   	  	date <- x[x[, "name"] == "AcquisitionDate", "value"]#
      	time <- substr(x[x[, "name"] == "AcquisitionTime", "value"], 1, 4)         #
      }  #
#       time <- sprintf("%04d", time)      #
    }#
    ### better date handling#
    date <- as.Date(as.character(date), format="%Y%m%d")#
    if (time >= 2400){#
      time <- time - 2400#
      time <- sprintf("%04d", time)#
      date <- date+1#
    }#
    date <- gsub("-", "", as.character(date))  #
    stub <- paste(date, time, sep='_')		#
    if (grepl("ROIs", x=path)) stub <- paste("ROI", stub, sep="_")#
    name <- paste(id, stub, sep="_")#
    if (length(niis) > 1){		#
      system(sprintf('FSLDIR=/usr/local/fsl; FSLOUTPUTTYPE=NIFTI_GZ; export FSLDIR FSLOUTPUTTYPE; echo $FSLDIR; sh ${FSLDIR}/etc/fslconf/fsl.sh; /usr/local/fsl/bin/fslmerge -z "%s"/%s.nii.gz "%s"/*.nii.gz', iddir, name, path))#
    }#
    system(sprintf('mkdir "%s"', iddir))#
    if (length(niis) == 1){#
      system(sprintf('mv "%s"/*.nii.gz "%s"/%s.nii.gz', path, iddir, name))#
    }#
    system(sprintf('rm "%s"/*.nii.gz', path))#
    setwd(dirname(path))#
#     stop("me")
newpath <- file.path(dirname(path), name)
newpath
system(sprintf('mv "%s" "%s"', path, newpath))
path
system(sprintf('tar -cvzf "%s" ./"%s"', paste(newpath, ".tar.gz", sep=""), basename(newpath)))
rm(list=ls())#
library(oro.dicom)#
library(bitops)#
library(arules)#
username <- Sys.info()["user"][[1]]#
basedir <- file.path("/Users", username, "Dropbox/CTR/DHanley/CT_Registration/Brain_Seg_Rerun")#
#basedir <- file.path("/Volumes/CT_Data/MISTIE")#
#
setwd(basedir)#
#
addon <- function(x, add){#
	ss <- strsplit(x, "-")#
	ss <- lapply(ss, gsub, pattern=".dcm", replacement="", fixed=TRUE)#
	ss <- lapply(ss, c, paste(add, ".dcm" ,sep=""))#
	lss <- sapply(ss, length)#
	if (any(lss) == 0) stop("Wrong string type")#
	files <- sapply(ss, paste, sep="", collapse="-")#
	return(files)#
}#
#
files <- dir(path=basedir, pattern="dcm", full.names=TRUE, recursive=TRUE)#
files <- files[!grepl("Sorted", files)]#
paths <- unique(dirname(files))#
#
# paths <- paths[-grep("173-361", paths, fixed=T)]#
#
lpath <- length(paths)#
if (lpath >= 1){#
  for (ipath in 1:length(paths)){#
    path <- paths[ipath]#
    dcms <- list.files(path=path, pattern="dcm")#
    four <- grep(pattern="IM-\\d\\d\\d\\d-\\d\\d\\d\\d-\\d\\d\\d\\d\\.dcm", x=dcms)#
    ns <- unique(as.numeric(sapply(strsplit(dcms, "-"), function(x) x[2])))#
    if (length(ns) > 1) stop(paste(path, "has multi images"))#
    if (length(four) > 0) {#
    	fimgs <- dcms[four]#
    	ss <- strsplit(fimgs, "-")#
    	ss <- lapply(ss, function(x) grep(x, pattern=".dcm", fixed=TRUE, value=TRUE))#
    	lss <- sapply(ss, length)#
    	if (any(lss) == 0) stop(paste(path, "four images are bad"))#
    	ss <- unique(as.numeric(gsub(unlist(ss), pattern=".dcm", replacement="", fixed=TRUE)))#
    	if (length(ss) > 1)	stop(paste(path, "has multiple four images"))#
    }#
  }#
}#
#
#setwd(path)#
#files <- list.files(pattern="IM-0004-\\d\\d\\d\\d\\.dcm")#
#chfiles <- addon(files, "0002")#
#for (ifile in 1:length(files)) system(sprintf("mv %s %s", files[ifile], chfiles[ifile]))#
#
ipath <- 1#
lpath <- length(paths)#
#
goNext <- function(date, time){#
	gonext=FALSE#
	if (length(time) > 0 & length(date) > 0){#
		if (time == "" | date == ""){ #
			gonext=TRUE		#
		}#
	} else {#
		gonext <- TRUE        	#
	}#
	gonext#
}#
if (lpath >= 1){#
  for (ipath in 1:length(paths)){#
    path <- paths[ipath]#
    system(sprintf('rm "%s"/*.nii.gz', path))#
    res <- system(sprintf('/Applications/dcm2nii -e N -f Y -p N -x N -n Y -g Y "%s"', path))#
    if (as.logical(res)) stop("Conversion Error")#
    niis <- dir(path=path, pattern=".nii.gz")#
    stub <- unique(substr(niis,1, 13))#
    id <- sub(pattern=".*(\\d\\d\\d-(\\d)\\d\\d\\d).*", replacement="\\1", x=path)#
    iddir <- file.path(basedir, id)#
    date <- as.numeric(substr(stub, 1, 8))#
    time <- as.numeric(substr(stub, 10, 13))#
#
    if (as.numeric(substr(stub, 1, 4)) < 1990) {#
      dcms <- dir(path=path, pattern="dcm", full.names=TRUE)#
      x <- readDICOM(dcms[1], pixelData=F)#
      x <- x$hdr[[1]]#
   	  	date <- x[x[, "name"] == "StudyDate", "value"]#
      	time <- substr(x[x[, "name"] == "StudyTime", "value"], 1, 4)#
      if (goNext(date, time)) {#
	      date <- x[x[, "name"] == "SeriesDate", "value"]#
	      time <- substr(x[x[, "name"] == "SeriesTime", "value"], 1, 4)     #
      }#
      if (goNext(date, time)) {#
   	  	date <- x[x[, "name"] == "AcquisitionDate", "value"]#
      	time <- substr(x[x[, "name"] == "AcquisitionTime", "value"], 1, 4)         #
      }  #
#       time <- sprintf("%04d", time)      #
    }#
    ### better date handling#
    date <- as.Date(as.character(date), format="%Y%m%d")#
    if (time >= 2400){#
      time <- time - 2400#
      time <- sprintf("%04d", time)#
      date <- date+1#
    }#
    date <- gsub("-", "", as.character(date))  #
    stub <- paste(date, time, sep='_')		#
    if (grepl("ROIs", x=path)) stub <- paste("ROI", stub, sep="_")#
    name <- paste(id, stub, sep="_")#
    if (length(niis) > 1){		#
      system(sprintf('FSLDIR=/usr/local/fsl; FSLOUTPUTTYPE=NIFTI_GZ; export FSLDIR FSLOUTPUTTYPE; echo $FSLDIR; sh ${FSLDIR}/etc/fslconf/fsl.sh; /usr/local/fsl/bin/fslmerge -z "%s"/%s.nii.gz "%s"/*.nii.gz', iddir, name, path))#
    }#
    system(sprintf('mkdir "%s"', iddir))#
    if (length(niis) == 1){#
      system(sprintf('mv "%s"/*.nii.gz "%s"/%s.nii.gz', path, iddir, name))#
    }#
    system(sprintf('rm "%s"/*.nii.gz', path))#
    setwd(dirname(path))#
#     stop("me")#
    newpath <- file.path(dirname(path), name)#
    system(sprintf('mv "%s" "%s"', path, newpath))#
    system(sprintf('tar -cvzf "%s" ./"%s"', paste(newpath, ".tar.gz", sep=""), basename(newpath)))#
     system(sprintf('rm -R "%s"', newpath))#
  }#
}
ipath
path <- paths[ipath]#
    system(sprintf('rm "%s"/*.nii.gz', path))#
    res <- system(sprintf('/Applications/dcm2nii -e N -f Y -p N -x N -n Y -g Y "%s"', path))#
    if (as.logical(res)) stop("Conversion Error")#
    niis <- dir(path=path, pattern=".nii.gz")#
    stub <- unique(substr(niis,1, 13))#
    id <- sub(pattern=".*(\\d\\d\\d-(\\d)\\d\\d\\d).*", replacement="\\1", x=path)#
    iddir <- file.path(basedir, id)#
    date <- as.numeric(substr(stub, 1, 8))#
    time <- as.numeric(substr(stub, 10, 13))#
#
    if (as.numeric(substr(stub, 1, 4)) < 1990) {#
      dcms <- dir(path=path, pattern="dcm", full.names=TRUE)#
      x <- readDICOM(dcms[1], pixelData=F)#
      x <- x$hdr[[1]]#
   	  	date <- x[x[, "name"] == "StudyDate", "value"]#
      	time <- substr(x[x[, "name"] == "StudyTime", "value"], 1, 4)#
      if (goNext(date, time)) {#
	      date <- x[x[, "name"] == "SeriesDate", "value"]#
	      time <- substr(x[x[, "name"] == "SeriesTime", "value"], 1, 4)     #
      }#
      if (goNext(date, time)) {#
   	  	date <- x[x[, "name"] == "AcquisitionDate", "value"]#
      	time <- substr(x[x[, "name"] == "AcquisitionTime", "value"], 1, 4)         #
      }  #
#       time <- sprintf("%04d", time)      #
    }
path
date <- as.Date(as.character(date), format="%Y%m%d")#
    if (time >= 2400){#
      time <- time - 2400#
      time <- sprintf("%04d", time)#
      date <- date+1#
    }#
    date <- gsub("-", "", as.character(date))  #
    stub <- paste(date, time, sep='_')		#
    if (grepl("ROIs", x=path)) stub <- paste("ROI", stub, sep="_")#
    name <- paste(id, stub, sep="_")
date
system(sprintf('FSLDIR=/usr/local/fsl; FSLOUTPUTTYPE=NIFTI_GZ; export FSLDIR FSLOUTPUTTYPE; echo $FSLDIR; sh ${FSLDIR}/etc/fslconf/fsl.sh; /usr/local/fsl/bin/fslmerge -z "%s"/%s.nii.gz "%s"/*.nii.gz', iddir, name, path))
iidir
iddir
newpath
name
path <- paths[ipath]#
    system(sprintf('rm "%s"/*.nii.gz', path))#
    res <- system(sprintf('/Applications/dcm2nii -e N -f Y -p N -x N -n Y -g Y "%s"', path))#
    if (as.logical(res)) stop("Conversion Error")#
    niis <- dir(path=path, pattern=".nii.gz")#
    stub <- unique(substr(niis,1, 13))#
    id <- sub(pattern=".*(\\d\\d\\d-(\\d)\\d\\d\\d).*", replacement="\\1", x=path)#
    iddir <- file.path(basedir, id)#
    date <- as.numeric(substr(stub, 1, 8))#
    time <- as.numeric(substr(stub, 10, 13))#
#
    if (as.numeric(substr(stub, 1, 4)) < 1990) {#
      dcms <- dir(path=path, pattern="dcm", full.names=TRUE)#
      x <- readDICOM(dcms[1], pixelData=F)#
      x <- x$hdr[[1]]#
   	  	date <- x[x[, "name"] == "StudyDate", "value"]#
      	time <- substr(x[x[, "name"] == "StudyTime", "value"], 1, 4)#
      if (goNext(date, time)) {#
	      date <- x[x[, "name"] == "SeriesDate", "value"]#
	      time <- substr(x[x[, "name"] == "SeriesTime", "value"], 1, 4)     #
      }#
      if (goNext(date, time)) {#
   	  	date <- x[x[, "name"] == "AcquisitionDate", "value"]#
      	time <- substr(x[x[, "name"] == "AcquisitionTime", "value"], 1, 4)         #
      }  #
#       time <- sprintf("%04d", time)      #
    }#
    ### better date handling#
    date <- as.Date(as.character(date), format="%Y%m%d")#
    if (time >= 2400){#
      time <- time - 2400#
      time <- sprintf("%04d", time)#
      date <- date+1#
    }#
    date <- gsub("-", "", as.character(date))  #
    stub <- paste(date, time, sep='_')		#
    if (grepl("ROIs", x=path)) stub <- paste("ROI", stub, sep="_")
stub
id
path <- paths[ipath]#
    system(sprintf('rm "%s"/*.nii.gz', path))#
    res <- system(sprintf('/Applications/dcm2nii -e N -f Y -p N -x N -n Y -g Y "%s"', path))#
    if (as.logical(res)) stop("Conversion Error")#
    niis <- dir(path=path, pattern=".nii.gz")#
    stub <- unique(substr(niis,1, 13))#
    id <- sub(pattern=".*(\\d\\d\\d-(\\d)\\d\\d\\d)_.*", replacement="\\1", x=path)#
    iddir <- file.path(basedir, id)#
    date <- as.numeric(substr(stub, 1, 8))#
    time <- as.numeric(substr(stub, 10, 13))
id
path <- paths[ipath]#
    system(sprintf('rm "%s"/*.nii.gz', path))#
    res <- system(sprintf('/Applications/dcm2nii -e N -f Y -p N -x N -n Y -g Y "%s"', path))#
    if (as.logical(res)) stop("Conversion Error")#
    niis <- dir(path=path, pattern=".nii.gz")#
    stub <- unique(substr(niis,1, 13))#
    id <- sub(pattern=".*(\\d\\d\\d-(\\d)\\d\\d\\d)_.*", replacement="\\1", x=path)
path
id <- sub(pattern=".*(\\d\\d\\d-(\\d|)\\d\\d\\d)_.*", replacement="\\1", x=path)
id
id <- sub(pattern=".*(\\d\\d\\d-(\\d|)\\d\\d\\d)_.*", replacement="\\1", x=path)
rm(list=ls())#
library(oro.dicom)#
library(bitops)#
library(arules)#
username <- Sys.info()["user"][[1]]#
basedir <- file.path("/Users", username, "Dropbox/CTR/DHanley/CT_Registration/Brain_Seg_Rerun")#
#basedir <- file.path("/Volumes/CT_Data/MISTIE")#
#
setwd(basedir)#
#
addon <- function(x, add){#
	ss <- strsplit(x, "-")#
	ss <- lapply(ss, gsub, pattern=".dcm", replacement="", fixed=TRUE)#
	ss <- lapply(ss, c, paste(add, ".dcm" ,sep=""))#
	lss <- sapply(ss, length)#
	if (any(lss) == 0) stop("Wrong string type")#
	files <- sapply(ss, paste, sep="", collapse="-")#
	return(files)#
}#
#
files <- dir(path=basedir, pattern="dcm", full.names=TRUE, recursive=TRUE)#
files <- files[!grepl("Sorted", files)]#
paths <- unique(dirname(files))#
#
# paths <- paths[-grep("173-361", paths, fixed=T)]#
#
lpath <- length(paths)#
if (lpath >= 1){#
  for (ipath in 1:length(paths)){#
    path <- paths[ipath]#
    dcms <- list.files(path=path, pattern="dcm")#
    four <- grep(pattern="IM-\\d\\d\\d\\d-\\d\\d\\d\\d-\\d\\d\\d\\d\\.dcm", x=dcms)#
    ns <- unique(as.numeric(sapply(strsplit(dcms, "-"), function(x) x[2])))#
    if (length(ns) > 1) stop(paste(path, "has multi images"))#
    if (length(four) > 0) {#
    	fimgs <- dcms[four]#
    	ss <- strsplit(fimgs, "-")#
    	ss <- lapply(ss, function(x) grep(x, pattern=".dcm", fixed=TRUE, value=TRUE))#
    	lss <- sapply(ss, length)#
    	if (any(lss) == 0) stop(paste(path, "four images are bad"))#
    	ss <- unique(as.numeric(gsub(unlist(ss), pattern=".dcm", replacement="", fixed=TRUE)))#
    	if (length(ss) > 1)	stop(paste(path, "has multiple four images"))#
    }#
  }#
}#
#
#setwd(path)#
#files <- list.files(pattern="IM-0004-\\d\\d\\d\\d\\.dcm")#
#chfiles <- addon(files, "0002")#
#for (ifile in 1:length(files)) system(sprintf("mv %s %s", files[ifile], chfiles[ifile]))#
#
ipath <- 1#
lpath <- length(paths)#
#
goNext <- function(date, time){#
	gonext=FALSE#
	if (length(time) > 0 & length(date) > 0){#
		if (time == "" | date == ""){ #
			gonext=TRUE		#
		}#
	} else {#
		gonext <- TRUE        	#
	}#
	gonext#
}#
if (lpath >= 1){#
  for (ipath in 1:length(paths)){#
    path <- paths[ipath]#
    system(sprintf('rm "%s"/*.nii.gz', path))#
    res <- system(sprintf('/Applications/dcm2nii -e N -f Y -p N -x N -n Y -g Y "%s"', path))#
    if (as.logical(res)) stop("Conversion Error")#
    niis <- dir(path=path, pattern=".nii.gz")#
    stub <- unique(substr(niis,1, 13))#
    id <- sub(pattern=".*(\\d\\d\\d-(\\d|)\\d\\d\\d)_.*", replacement="\\1", x=path)#
    iddir <- file.path(basedir, id)#
    date <- as.numeric(substr(stub, 1, 8))#
    time <- as.numeric(substr(stub, 10, 13))#
#
    if (as.numeric(substr(stub, 1, 4)) < 1990) {#
      dcms <- dir(path=path, pattern="dcm", full.names=TRUE)#
      x <- readDICOM(dcms[1], pixelData=F)#
      x <- x$hdr[[1]]#
   	  	date <- x[x[, "name"] == "StudyDate", "value"]#
      	time <- substr(x[x[, "name"] == "StudyTime", "value"], 1, 4)#
      if (goNext(date, time)) {#
	      date <- x[x[, "name"] == "SeriesDate", "value"]#
	      time <- substr(x[x[, "name"] == "SeriesTime", "value"], 1, 4)     #
      }#
      if (goNext(date, time)) {#
   	  	date <- x[x[, "name"] == "AcquisitionDate", "value"]#
      	time <- substr(x[x[, "name"] == "AcquisitionTime", "value"], 1, 4)         #
      }  #
#       time <- sprintf("%04d", time)      #
    }#
    ### better date handling#
    date <- as.Date(as.character(date), format="%Y%m%d")#
    if (time >= 2400){#
      time <- time - 2400#
      time <- sprintf("%04d", time)#
      date <- date+1#
    }#
    date <- gsub("-", "", as.character(date))  #
    stub <- paste(date, time, sep='_')		#
    if (grepl("ROIs", x=path)) stub <- paste("ROI", stub, sep="_")#
    name <- paste(id, stub, sep="_")#
    if (length(niis) > 1){		#
      system(sprintf('FSLDIR=/usr/local/fsl; FSLOUTPUTTYPE=NIFTI_GZ; export FSLDIR FSLOUTPUTTYPE; echo $FSLDIR; sh ${FSLDIR}/etc/fslconf/fsl.sh; /usr/local/fsl/bin/fslmerge -z "%s"/%s.nii.gz "%s"/*.nii.gz', iddir, name, path))#
    }#
    system(sprintf('mkdir "%s"', iddir))#
    if (length(niis) == 1){#
      system(sprintf('mv "%s"/*.nii.gz "%s"/%s.nii.gz', path, iddir, name))#
    }#
    system(sprintf('rm "%s"/*.nii.gz', path))#
    setwd(dirname(path))#
#     stop("me")#
    newpath <- file.path(dirname(path), name)#
    system(sprintf('mv "%s" "%s"', path, newpath))#
    system(sprintf('tar -cvzf "%s" ./"%s"', paste(newpath, ".tar.gz", sep=""), basename(newpath)))#
     system(sprintf('rm -R "%s"', newpath))#
  }#
}
library(healthVis)
library(healthvis)
?heatmapVis
nsubj = 40#
nobs = 25#
data1 <- matrix(rnorm(nsubj*nobs), nsubj, nobs)#
rownames(data1) <- sapply(1:nsubj, function(x){paste("S", x, sep="")})#
colnames(data1) <- sapply(1:nobs, function(x){paste("V", x, sep="")})#
#
# Create a random set of discrete and continuous covariates to sort by#
sort.by1 <- data.frame("Treatment"=rbinom(nsubj, 1, 0.4), "Age"=rpois(nsubj, 30))#
#
heatmapVis(data=data1, sort.by=sort.by1)
nsubj = 40#
nobs = 25#
data1 <- matrix(rnorm(nsubj*nobs), nsubj, nobs)#
rownames(data1) <- sapply(1:nsubj, function(x){paste("S", x, sep="")})#
colnames(data1) <- sapply(1:nobs, function(x){paste("V", x, sep="")})#
#
# Create a random set of discrete and continuous covariates to sort by#
sort.by1 <- data.frame("Treatment"=rbinom(nsubj, 1, 0.4), "Age"=rpois(nsubj, 30))#
#
heatmapVis(data=data1, sort.by=sort.by1)
