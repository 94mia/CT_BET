study = "ROI_images"
}
basedir = file.path(rootdir, "Final_Brain_Seg")
resdir = file.path(basedir, "results")
paperdir = file.path(basedir, "Skull_Strip_Paper")
figdir = file.path(paperdir, "figure")
homedir <- file.path(basedir, study)
rdas = list.files(path=homedir, pattern=".*_CT_.*Header_Info.Rda",
full.names = TRUE, recursive = TRUE)
stopifnot(!any(grepl("antry", rdas)))
rdas = rdas[grepl("Sorted", rdas)]
rda = data.frame(rda=rdas, stringsAsFactors = FALSE)
rda$id = basename(rda$rda)
rda$id = gsub("(.*)_Header_Info", "\\1", rda$id)
rda$id
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(plyr)
library(reshape2)
library(ggplot2)
library(matrixStats)
library(gridExtra)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/CT_Registration")
ROIformat = FALSE
study = "Original_Images"
if (ROIformat) {
study = "ROI_images"
}
basedir = file.path(rootdir, "Final_Brain_Seg")
resdir = file.path(basedir, "results")
paperdir = file.path(basedir, "Skull_Strip_Paper")
figdir = file.path(paperdir, "figure")
homedir <- file.path(basedir, study)
rdas = list.files(path=homedir, pattern=".*_CT_.*Header_Info.Rda",
full.names = TRUE, recursive = TRUE)
stopifnot(!any(grepl("antry", rdas)))
rdas = rdas[grepl("Sorted", rdas)]
rda = data.frame(rda=rdas, stringsAsFactors = FALSE)
rda$id = basename(rda$rda)
rda$id = gsub("(.*)_Header_Info.*", "\\1", rda$id)
rda
fname = file.path(resdir, "Overlap_Statistics.Rda")
load(fname)
img.id = basename(ddf$img)
img.id
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(plyr)
library(reshape2)
library(ggplot2)
library(matrixStats)
library(gridExtra)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/CT_Registration")
ROIformat = FALSE
study = "Original_Images"
if (ROIformat) {
study = "ROI_images"
}
basedir = file.path(rootdir, "Final_Brain_Seg")
resdir = file.path(basedir, "results")
paperdir = file.path(basedir, "Skull_Strip_Paper")
figdir = file.path(paperdir, "figure")
homedir <- file.path(basedir, study)
rdas = list.files(path=homedir, pattern=".*_CT_.*Header_Info.Rda",
full.names = TRUE, recursive = TRUE)
stopifnot(!any(grepl("antry", rdas)))
rdas = rdas[grepl("Sorted", rdas)]
rda = data.frame(rda=rdas, stringsAsFactors = FALSE)
rda$id = basename(rda$rda)
rda$id = gsub("(.*)_Header_Info.*", "\\1", rda$id)
fname = file.path(resdir, "Overlap_Statistics.Rda")
load(fname)
img.id = unique(basename(ddf$img))
img.id = nii.stub(img.id)
rda = rda[ rda$id %in% img.id, ]
rownames(rda) = NULL
rda
nrow(ddf)
img.id
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(plyr)
library(reshape2)
library(ggplot2)
library(matrixStats)
library(gridExtra)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/CT_Registration")
ROIformat = FALSE
study = "Original_Images"
if (ROIformat) {
study = "ROI_images"
}
basedir = file.path(rootdir, "Final_Brain_Seg")
resdir = file.path(basedir, "results")
paperdir = file.path(basedir, "Skull_Strip_Paper")
figdir = file.path(paperdir, "figure")
homedir <- file.path(basedir, study)
rdas = list.files(path=homedir, pattern=".*_CT_.*Header_Info.Rda",
full.names = TRUE, recursive = TRUE)
stopifnot(!any(grepl("antry", rdas)))
rdas = rdas[grepl("Sorted", rdas)]
rda = data.frame(rda=rdas, stringsAsFactors = FALSE)
rda$id = basename(rda$rda)
rda$id = gsub("(.*)_Header_Info.*", "\\1", rda$id)
fname = file.path(resdir, "Overlap_Statistics.Rda")
load(fname)
img.id = unique(basename(ddf$img))
img.id = nii.stub(img.id)
rda = rda[ rda$id %in% img.id, ]
rownames(rda) = NULL
x = sapply(rda$rda, function(x){
load(x)
st = dcmtables[, "0018-0050-SliceThickness"]
ust = unique(st)
lust = length(ust)
if (lust > 1){
print(ust)
}
lust
})
uid = unique(ddf$img.id)
nscans = length(uid)
pid = gsub("(\\d\\d\\d-(\\d|)\\d\\d\\d).*", "\\1", uid)
pid = unique(pid)
npt = length(pid)
ctr = unique(gsub("(\\d\\d\\d)-.*", "\\1", uid))
n.ctr = length(ctr)
nscans
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(plyr)
library(reshape2)
library(ggplot2)
library(matrixStats)
library(gridExtra)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/CT_Registration")
ROIformat = FALSE
study = "Original_Images"
if (ROIformat) {
study = "ROI_images"
}
basedir = file.path(rootdir, "Final_Brain_Seg")
resdir = file.path(basedir, "results")
paperdir = file.path(basedir, "Skull_Strip_Paper")
figdir = file.path(paperdir, "figure")
homedir <- file.path(basedir, study)
rdas = list.files(path=homedir, pattern=".*_CT_.*Header_Info.Rda",
full.names = TRUE, recursive = TRUE)
stopifnot(!any(grepl("antry", rdas)))
rdas = rdas[grepl("Sorted", rdas)]
rda = data.frame(rda=rdas, stringsAsFactors = FALSE)
rda$id = basename(rda$rda)
rda$id = gsub("(.*)_Header_Info.*", "\\1", rda$id)
fname = file.path(resdir, "Overlap_Statistics.Rda")
load(fname)
img.id = unique(basename(ddf$img))
img.id = nii.stub(img.id)
rda = rda[ rda$id %in% img.id, ]
rownames(rda) = NULL
x = sapply(rda$rda, function(x){
load(x)
st = dcmtables[, "0018-0050-SliceThickness"]
ust = unique(st)
lust = length(ust)
if (lust > 1){
print(ust)
}
lust
})
uid = unique(basename(ddf$img))
nscans = length(uid)
pid = gsub("(\\d\\d\\d-(\\d|)\\d\\d\\d).*", "\\1", uid)
pid = unique(pid)
npt = length(pid)
ctr = unique(gsub("(\\d\\d\\d)-.*", "\\1", uid))
n.ctr = length(ctr)
nscans
pid
npt
n.ctr
x
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(plyr)
library(reshape2)
library(ggplot2)
library(matrixStats)
library(gridExtra)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/CT_Registration")
ROIformat = FALSE
study = "Original_Images"
if (ROIformat) {
study = "ROI_images"
}
basedir = file.path(rootdir, "Final_Brain_Seg")
resdir = file.path(basedir, "results")
paperdir = file.path(basedir, "Skull_Strip_Paper")
figdir = file.path(paperdir, "figure")
homedir <- file.path(basedir, study)
rdas = list.files(path=homedir, pattern=".*_CT_.*Header_Info.Rda",
full.names = TRUE, recursive = TRUE)
stopifnot(!any(grepl("antry", rdas)))
rdas = rdas[grepl("Sorted", rdas)]
rda = data.frame(rda=rdas, stringsAsFactors = FALSE)
rda$id = basename(rda$rda)
rda$id = gsub("(.*)_Header_Info.*", "\\1", rda$id)
fname = file.path(resdir, "Overlap_Statistics.Rda")
load(fname)
img.id = unique(basename(ddf$img))
img.id = nii.stub(img.id)
rda = rda[ rda$id %in% img.id, ]
rownames(rda) = NULL
x = sapply(rda$rda, function(x){
load(x)
st = dcmtables[, "0018-0050-SliceThickness"]
ust = unique(st)
lust = length(ust)
if (lust > 1){
print(ust)
}
lust
})
library(qdap)
replace_number("I like 346457 ice cream cones.")
install.packages("qdap")
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(plyr)
library(reshape2)
library(ggplot2)
library(matrixStats)
library(gridExtra)
library(qdap)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/CT_Registration")
ROIformat = FALSE
study = "Original_Images"
if (ROIformat) {
study = "ROI_images"
}
basedir = file.path(rootdir, "Final_Brain_Seg")
resdir = file.path(basedir, "results")
paperdir = file.path(basedir, "Skull_Strip_Paper")
figdir = file.path(paperdir, "figure")
homedir <- file.path(basedir, study)
rdas = list.files(path=homedir, pattern=".*_CT_.*Header_Info.Rda",
full.names = TRUE, recursive = TRUE)
stopifnot(!any(grepl("antry", rdas)))
rdas = rdas[grepl("Sorted", rdas)]
rda = data.frame(rda=rdas, stringsAsFactors = FALSE)
rda$id = basename(rda$rda)
rda$id = gsub("(.*)_Header_Info.*", "\\1", rda$id)
fname = file.path(resdir, "Overlap_Statistics.Rda")
load(fname)
img.id = unique(basename(ddf$img))
img.id = nii.stub(img.id)
rda = rda[ rda$id %in% img.id, ]
rownames(rda) = NULL
x = sapply(rda$rda, function(x){
load(x)
st = dcmtables[, "0018-0050-SliceThickness"]
ust = unique(st)
lust = length(ust)
if (lust > 1){
print(ust)
}
lust
})
n.var.slice = sum(x > 1)
uid = unique(basename(ddf$img))
nscans = length(uid)
pid = gsub("(\\d\\d\\d-(\\d|)\\d\\d\\d).*", "\\1", uid)
pid = unique(pid)
npt = length(pid)
ctr = unique(gsub("(\\d\\d\\d)-.*", "\\1", uid))
n.ctr = length(ctr)
ddf = ddf[ !grepl("refill", ddf$ssimg), ]
cs =  sapply(ddf, class) == "list"
cs = names(cs)[cs]
for (icol in cs){
ddf[, icol] = unlist(ddf[, icol])
}
nscans
replace_number(nscans)
num_scans = replace_number(nscans)
substr(num_scans, 1, 2)
substr(num_scans, 1, 1)
mystr = "hey HO let's go!"
x= strsplit(mystr, " ")
x
x= strsplit(mystr, " ")[[1]]
toupper(substr(x, 1, 1))
?substr
paste(toupper(substr(x, 1, 1)), tolower(substr(x, 2))
mystr = c("hey ho let's go")
x= strsplit(mystr, " ")[[1]]
x
tolower(substr(x, 2))
tolower(substr(x, 2, 1e6))
tolower(substring(x, 2))
paste(toupper(substr(x, 1, 1)), tolower(substring(x, 2)))
x= strsplit(mystr, " ")[[1]]
paste(toupper(substr(x, 1, 1)), tolower(substring(x, 2)),
sep= "", collapse="")
x= strsplit(mystr, " ")[[1]]
paste(toupper(substr(x, 1, 1)), tolower(substring(x, 2)),
sep= "", collapse=" ")
proper = function(mystr) {
x= strsplit(mystr, " ")[[1]]
paste(toupper(substr(x, 1, 1)), tolower(substring(x, 2)),
sep= "", collapse=" ")
}
uid = unique(basename(ddf$img))
nscans = length(uid)
num_scans = proper(replace_number(nscans))
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(plyr)
library(reshape2)
library(ggplot2)
library(matrixStats)
library(gridExtra)
library(qdap)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/CT_Registration")
ROIformat = FALSE
study = "Original_Images"
if (ROIformat) {
study = "ROI_images"
}
basedir = file.path(rootdir, "Final_Brain_Seg")
resdir = file.path(basedir, "results")
paperdir = file.path(basedir, "Skull_Strip_Paper")
figdir = file.path(paperdir, "figure")
homedir <- file.path(basedir, study)
rdas = list.files(path=homedir, pattern=".*_CT_.*Header_Info.Rda",
full.names = TRUE, recursive = TRUE)
stopifnot(!any(grepl("antry", rdas)))
rdas = rdas[grepl("Sorted", rdas)]
rda = data.frame(rda=rdas, stringsAsFactors = FALSE)
rda$id = basename(rda$rda)
rda$id = gsub("(.*)_Header_Info.*", "\\1", rda$id)
fname = file.path(resdir, "Overlap_Statistics.Rda")
load(fname)
img.id = unique(basename(ddf$img))
img.id = nii.stub(img.id)
rda = rda[ rda$id %in% img.id, ]
rownames(rda) = NULL
x = sapply(rda$rda, function(x){
load(x)
st = dcmtables[, "0018-0050-SliceThickness"]
ust = unique(st)
lust = length(ust)
if (lust > 1){
print(ust)
}
lust
})
n.var.slice = sum(x > 1)
proper = function(mystr) {
x= strsplit(mystr, " ")[[1]]
paste(toupper(substr(x, 1, 1)), tolower(substring(x, 2)),
sep= "", collapse=" ")
}
uid = unique(basename(ddf$img))
nscans = length(uid)
num_scans = proper(replace_number(nscans))
num_scans
head(ddf)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mytest = function(...){
wilcox.test(...)
}
all.smooth.tests = ddply(long, .(int), function(df){
p.value= ddply(df, .(variable), function(x){
stats = lapply(list(median, mean, sd), function(func){
res = aggregate(value ~ smooth, func, data=x)
})
names(stats) = c("median", "mean", "sd")
cn = stats[[1]]$smooth
stats = lapply(stats, function(x){
x$smooth = NULL
x = c(t(x))
names(x) = cn
x
})
stats = unlist(stats)
wt = wilcox.test(value ~ smooth, data=x, paired=TRUE)
tt = t.test(value ~ smooth, data=x, paired=TRUE)
return(c(wt.p.value=wt$p.value, tt.p.value = tt$p.value,  stats))
})
}, .progress="text")
all.int.tests = ddply(long, .(smooth), function(df){
df = df[df$int %in% c("0.01", "0.1"), ]
p.value= ddply(df, .(variable), function(x){
stats = lapply(list(median, mean, sd), function(func){
res = aggregate(value ~ int, func, data=x)
})
names(stats) = c("median", "mean", "sd")
cn = stats[[1]]$int
stats = lapply(stats, function(x){
x$int = NULL
x = c(t(x))
names(x) = cn
x
})
stats = unlist(stats)
wt = wilcox.test(value ~ int, data=x, paired=TRUE)
tt = t.test(value ~ int, data=x, paired=TRUE)
return(c(wt.p.value=wt$p.value, tt.p.value = tt$p.value,  stats))
})
}, .progress="text")
all.smooth.tests
all.int.tests
smooth.dice = all.int.tests[
all.int.tests$variable =="Dice Similarity Index" &
all.int.tests$smooth == "Smoothed",]
smooth.dice
smooth = all.int.tests[ all.int.tests$smooth == "Smoothed"]
smooth.dice = smooth[
smooth$variable =="Dice Similarity Index",]
smooth.dice
smooth = all.int.tests[ all.int.tests$smooth == "Smoothed",]
smooth.dice = smooth[
smooth$variable =="Dice Similarity Index",]
smooth
smooth$wt.p.value
round(smooth$wt.p.value, 3)
class(smooth.dice)
sapply(smooth.dice, class)
num = sapply(smooth.dice, class) == "numeric"
smooth = all.int.tests[ all.int.tests$smooth == "Smoothed",]
smooth.dice = smooth[
smooth$variable =="Dice Similarity Index",]
num = sapply(smooth.dice, class) == "numeric"
smooth.dice[, num] = round(smooth.dice[, num], 3)
smooth.dice
smooth = all.int.tests[ all.int.tests$smooth == "Smoothed",]
num = sapply(smooth.dice, class) == "numeric"
smooth.dice[, num] = round(smooth.dice[, num], 3)
smooth.dice = smooth[
smooth$variable =="Dice Similarity Index",]
smooth
num
smooth = all.int.tests[ all.int.tests$smooth == "Smoothed",]
num = sapply(smooth, class) == "numeric"
smooth = all.int.tests[ all.int.tests$smooth == "Smoothed",]
num = sapply(smooth, class) == "numeric"
smooth[, num] = round(smooth[, num], 3)
smooth
smooth.dice = smooth[
smooth$variable =="Dice Similarity Index",]
smooth.dice
smooth = all.int.tests[ all.int.tests$smooth == "Smoothed",]
num = sapply(smooth, class) == "numeric"
smooth[, num] = round(smooth[, num], 3)
rownames(smooth) = smooth$variable
smooth$variable = smooth$smooth = NULL
smooth.dice = smooth["Dice Similarity Index",]
source('~/.active-rstudio-document', echo=TRUE)
smooth["Sensitivity", "median.0.01"]
smooth
smooth = all.int.tests[ all.int.tests$smooth == "Smoothed",]
pval <- function(pval) {
x <- ifelse(pval < 0.001, "< 0.001", sprintf("= %03.3f", pval))
return(x)
}
smooth$wt.p.value = pval(smooth$wt.p.value)
num = sapply(smooth, class) == "numeric"
smooth[, num] = round(smooth[, num], 3)
smooth
