return(x)
}
smooth$wt.p.value = pval(smooth$wt.p.value)
num = sapply(smooth, class) == "numeric"
smooth[, num] = round(smooth[, num], 4)
rownames(smooth) = smooth$variable
smooth$variable = smooth$smooth = NULL
smooth.dice = smooth["Dice Similarity Index",]
## ----eval=FALSE----------------------------------------------------------
## fname = file.path(resdir, "Longitudinal_Skull_Strip_Data.Rda")
## load(fname)
## df = all.df[ grep("SS_0.01", all.df$fname, fixed=TRUE), ]
##
## total.N = nrow(df)
##
##
## fname = file.path(resdir, "ICC_data.Rda")
## load(fname)
## npt.icc = smod$ngrps['id']
## n.mod = smod$devcomp$dims['n']
##
## num_scans.icc = nrow(ddf)
## fail = total.N - num_scans.icc
## pct.fail = round(fail/total.N * 100, 1)
##
## icc.ci = ICCest("id", "truevol", data=ddf)
## ----eval=TRUE-----------------------------------------------------------
fname = file.path(resdir, "ICC_Results.Rda")
load(fname)
iscen = which(icc.vals$runvol == "truevol" & icc.vals$smooth == TRUE &
icc.vals$int == 0.01)
iscen
fail.rates[iscne,]
fail.rates[iscen,]
fail.rates[iscen, icc.vals$smooth]
icc.vals$smooth
iscen = which(icc.vals$runvol == "truevol" & icc.vals$smooth == TRUE &
icc.vals$int == 0.01)
iscen
icc.vals[iscne,]
icc.vals[iscen,,]
icc.vals[iscen,]
fail.rates
fail.0.01 = fail.rates[ fail.rates$int == "0.01" & fail.rates$smooth == TRUE, "Bad.NoGant.pct"]
fail.0.01
library(cttools)
CT_Skull_Strip
all.med.diffs
source('~/.active-rstudio-document', echo=TRUE)
all.med.diffs
all.med.diffs$median = round(all.med.diffs$median, 4)
all.med.diffs = ddply(long, .(smooth), function(df){
df = df[df$int %in% c("0.01", "0.1"), ]
df = df[ order(df$id, df$variable, df$int), ]
diffs= ddply(df, .(variable), function(x){
#     x = df[ df$variable == "Sensitivity", ]
runvar = x$variable[1]
x = x[, c("value", "img", "int")]
x = reshape(x, direction="wide", idvar = "img", timevar="int")
d = x$value.0.01 - x$value.0.1
check = wilcox.test(d)
tt.check = t.test(d)
return(c(median=median(d), mean=mean(d), sd=sd(d), wt.p.value = check$p.value,
tt.p.value = tt.check$p.value))
})
}, .progress="text")
stopifnot(all.med.diffs$wt.p.value == all.int.tests$wt.p.value)
stopifnot(all.med.diffs$tt.p.value == all.int.tests$tt.p.value)
all.med.diffs$median = round(all.med.diffs$median, 4)
all.med.diffs$median
source('~/.active-rstudio-document', echo=TRUE)
all.med.diffs
sm.diffs = all.med.diffs[ all.med.diffs$smooth == "Smoothed",]
sm.diffs
sm.diffs = all.med.diffs[ all.med.diffs$smooth == "Smoothed",]
sm.diffs = sm.diffs[, c("variable", "median")]
sm.diffs
sm.diffs = all.med.diffs[ all.med.diffs$smooth == "Smoothed",]
tmp.names = sm.diffs$variable
sm.diffs = sm.diffs$median
names(sm.diffs) = tmp.names
sm.diffs
all.med.diffs = ddply(long, .(smooth), function(df){
df = df[df$int %in% c("0.01", "0.1"), ]
df = df[ order(df$id, df$variable, df$int), ]
diffs= ddply(df, .(variable), function(x){
#     x = df[ df$variable == "Sensitivity", ]
runvar = x$variable[1]
x = x[, c("value", "img", "int")]
x = reshape(x, direction="wide", idvar = "img", timevar="int")
d = x$value.0.01 - x$value.0.1
check = wilcox.test(d)
tt.check = t.test(d)
return(c(median=median(d), mean=mean(d), sd=sd(d), wt.p.value = check$p.value,
tt.p.value = tt.check$p.value))
})
}, .progress="text")
stopifnot(all.med.diffs$wt.p.value == all.int.tests$wt.p.value)
stopifnot(all.med.diffs$tt.p.value == all.int.tests$tt.p.value)
all.med.diffs$median = round(all.med.diffs$median, 4)
sm.diffs = all.med.diffs[ all.med.diffs$smooth == "Smoothed",]
tmp.names = sm.diffs$variable
sm.diffs = sm.diffs$median
names(sm.diffs) = tmp.names
sm.diffs
sprintf("%0.4f", sm.diffs)
source('~/.active-rstudio-document', echo=TRUE)
sm.diffs
source('~/.active-rstudio-document', echo=TRUE)
man.tab
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
x = ddf[ ddf$img == ddf$img[1], ]
print(x$id[1])
xx = sapply(x[, rc], wmax)
xx
x
wmax
xx = sapply(x[, rc], wmax)
xx = x$scen[xx]
xx
print(xx)
names(xx) = rc
xx
xx
res = ddply(ddf, .(img), function(x){
print(x$id[1])
xx = sapply(x[, rc], wmax)
xx = x$scen[xx]
print(xx)
names(xx) = rc
xx
})
res = ddply(ddf, .(img), function(x){
print(x$id[1])
xx = sapply(x[, rc], wmax)
xx = x$scen[xx]
# 	print(xx)
names(xx) = rc
print(length(xx))
xx
})
res = ddply(ddf, .(img), function(x){
print(x$id[1])
xx = sapply(x[, rc], wmax)
xx = x$scen[xx]
# 	print(xx)
names(xx) = rc
print(length(xx))
xx
})
x = ddf[ ddf$img == "232-521_20120106_1806_CT", ]
x
ddf$img
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
min(long[ long$smooth == "Smoothed","value")
min(long[ long$smooth == "Smoothed","value"])
stopifnot(long[ long$smooth == "Smoothed","value"] > 0.95)
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/CT_Registration")
ROIformat = FALSE
study = "Original_Images"
if (ROIformat) {
study = "ROI_images"
}
basedir = file.path(rootdir, "Final_Brain_Seg")
resdir = file.path(basedir, "results")
paperdir = file.path(basedir, "Skull_Strip_Paper")
figdir = file.path(paperdir, "figure")
progdir = file.path(basedir, "programs")
setwd(paperdir)
library(knitr)
purl("CT_Skull_Stripping_2014Nov19.Rnw")
## ----label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE----
library(knitr)
knit_hooks$set(webgl = hook_webgl)
opts_chunk$set(echo=FALSE, prompt=FALSE, message=FALSE, warning=FALSE, comment="", results='hide')
## ----label=setup, echo=FALSE---------------------------------------------
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(plyr)
library(reshape2)
library(ggplot2)
library(matrixStats)
library(gridExtra)
library(qdap)
library(ICC)
library(xtable)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/CT_Registration")
ROIformat = FALSE
study = "Original_Images"
if (ROIformat) {
study = "ROI_images"
}
basedir = file.path(rootdir, "Final_Brain_Seg")
resdir = file.path(basedir, "results")
paperdir = file.path(basedir, "Skull_Strip_Paper")
figdir = file.path(paperdir, "figure")
progdir = file.path(basedir, "programs")
new.ids = readLines(file.path(progdir, "newid_list.txt"))
homedir <- file.path(basedir, study)
rdas = list.files(path=homedir, pattern=".*_CT_.*Header_Info.Rda",
full.names = TRUE, recursive = TRUE)
gant = rdas[grepl("antry", rdas)]
gant = gsub("_ungantry", "", gant)
rdas = rdas[ ! (rdas %in% gant)]
# stopifnot(!any(grepl("antry", rdas)))
rdas = rdas[grepl("Sorted", rdas)]
rda = data.frame(rda=rdas, stringsAsFactors = FALSE)
rda$id = basename(rda$rda)
rda$id = gsub("(.*)_Header_Info.*", "\\1", rda$id)
rda$id = gsub("_ungantry", "", rda$id)
runold = TRUE
if (runold) rda = rda[ !(rda$id %in% new.ids), ]
get.val = function(rda, val){
if ("dcmtables" %in% ls()) rm(list="dcmtables")
ungant.rda = gsub("_Header_Info\\.Rda",
"_ungantry_Header_Info\\.Rda",
rda)
if (file.exists(ungant.rda)) rda = ungant.rda
load(rda)
cn = colnames(dcmtables)
n.slice = length(unique(dcmtables[, "0018-0050-SliceThickness"]))
co.kern = unique(dcmtables[, val])
co.kern$n.slice = n.slice
stopifnot(nrow(co.kern) == 1)
co.kern
}
fname = file.path(resdir, "Overlap_Statistics.Rda")
load(fname)
img.id = unique(basename(ddf$img))
img.id = nii.stub(img.id)
rda = rda[ rda$id %in% img.id, ]
rownames(rda) = NULL
##############################
# Gantry tilt numbers and manufacturer
##############################
img.data = ldply(.data=rda$rda,  get.val,
val=c("0018-1210-ConvolutionKernel",
"0008-0070-Manufacturer",
"0018-1120-GantryDetectorTilt"),
.progress="text")
colnames(img.data) = c("kern", "man", "tilt", "nslices")
img.data$rda  = rda$rda
img.data$tilt = as.numeric(img.data$tilt)
# data$rda = df$rda
man.tab = sort(table(img.data$man), decreasing=TRUE)
stopifnot(length(man.tab) == 4)
manu= names(man.tab)
manu[manu == 'TOSHIBA'] = "Toshiba"
manu[manu == 'SIEMENS'] = "Siemens"
check.na = function(x){
stopifnot(all(!is.na(x)))
}
check.na(img.data$tilt)
n.gant = sum(img.data$tilt != 0)
x = sapply(rda$rda, function(x){
load(x)
st = dcmtables[, "0018-0050-SliceThickness"]
ust = unique(st)
lust = length(ust)
if (lust > 1){
print(ust)
}
lust
})
n.var.slice = sum(x > 1)
proper = function(mystr) {
x= strsplit(mystr, " ")[[1]]
paste(toupper(substr(x, 1, 1)), tolower(substring(x, 2)),
sep= "", collapse=" ")
}
uid = unique(basename(ddf$img))
nscans = length(uid)
num_scans = proper(replace_number(nscans))
pid = gsub("(\\d\\d\\d-(\\d|)\\d\\d\\d).*", "\\1", uid)
pid = unique(pid)
npt = length(pid)
ctr = unique(gsub("(\\d\\d\\d)-.*", "\\1", uid))
n.ctr = length(ctr)
ddf = ddf[ !grepl("refill", ddf$ssimg), ]
cs =  sapply(ddf, class) == "list"
cs = names(cs)[cs]
for (icol in cs){
ddf[, icol] = unlist(ddf[, icol])
}
d = ddf
d$truevol = d$estvol = NULL
makeint = function(data){
data$scen = gsub(".*_SS_(.*)_Mask.*", "\\1", data$ssimg )
data$smooth = !grepl("nopresmooth", data$scen)
data$smooth = revalue(as.character(data$smooth),
c("TRUE"="Smoothed", "FALSE"="Unsmoothed"))
data$int = gsub("_nopresmooth", "", data$scen)
data
}
ddf = makeint(ddf)
ddf$diffvol = (ddf$truevol - ddf$estvol) / 1000
ddf$absdiff = abs(ddf$diffvol)
long = melt(d, id.vars = c("id", "img", "rimg",
"ssimg", "hdr"))
long = makeint(long)
long$id = as.numeric(factor(long$id))
runcols =  c("dice", "jaccard", "sens", "spec", "accur", "absdiff")
rc = runcols[ !runcols %in% c("absdiff")]
wmax = function(x){
which(x == max(x))
}
x = ddf[ ddf$img == ddf$img[1], ]
res = ddply(ddf, .(img), function(x){
print(x$id[1])
xx = sapply(x[, rc], wmax)
xx = x$scen[xx]
# 	print(xx)
names(xx) = rc
print(length(xx))
xx
})
results= sapply(res[, rc], table)
maxtab = sapply(results, function(x) {
names(sort(x, decreasing=TRUE)[1])
})
res = ddply(ddf, .(scen), function(x){
cmin = colMins(x[, runcols])
cmax = colMaxs(x[, runcols])
cmean = colMeans(x[, runcols])
cmed = colMedians(as.matrix(x[, runcols]))
xx = data.frame(t(cbind(cmin, cmax, cmean, cmed)))
xx$run = c("min", "max", "mean", "median")
xx
})
nospec = long[ long$variable %in% c("accur", "sens"),]
long = long[ long$variable != "jaccard", ]
long$variable = revalue(long$variable, c("sens" = "Sensitivity",
"spec" = "Specificity",
"accur" = "Accuracy",
"dice" = "Dice Similarity Index"))
## ----tests---------------------------------------------------------------
mytest = function(...){
wilcox.test(...)
}
all.smooth.tests = ddply(long, .(int), function(df){
p.value= ddply(df, .(variable), function(x){
stats = lapply(list(median, mean, sd), function(func){
res = aggregate(value ~ smooth, func, data=x)
})
names(stats) = c("median", "mean", "sd")
cn = stats[[1]]$smooth
stats = lapply(stats, function(x){
x$smooth = NULL
x = c(t(x))
names(x) = cn
x
})
stats = unlist(stats)
wt = wilcox.test(value ~ smooth, data=x, paired=TRUE)
tt = t.test(value ~ smooth, data=x, paired=TRUE)
return(c(wt.p.value=wt$p.value, tt.p.value = tt$p.value,  stats))
})
}, .progress="text")
all.int.tests = ddply(long, .(smooth), function(df){
df = df[df$int %in% c("0.01", "0.1"), ]
p.value= ddply(df, .(variable), function(x){
stats = lapply(list(median, mean, sd), function(func){
res = aggregate(value ~ int, func, data=x)
})
names(stats) = c("median", "mean", "sd")
cn = stats[[1]]$int
stats = lapply(stats, function(x){
x$int = NULL
x = c(t(x))
names(x) = cn
x
})
stats = unlist(stats)
wt = wilcox.test(value ~ int, data=x, paired=TRUE)
tt = t.test(value ~ int, data=x, paired=TRUE)
return(c(wt.p.value=wt$p.value, tt.p.value = tt$p.value,  stats))
})
}, .progress="text")
df = long[ long$smooth == "Smoothed", ]
df = df[df$int %in% c("0.01", "0.1"), ]
df = df[ order(df$id, df$variable, df$int), ]
x = df[ df$variable == "Sensitivity", ]
runvar = x$variable[1]
x = x[, c("value", "img", "int")]
x = reshape(x, direction="wide", idvar = "img", timevar="int")
d = x$value.0.01 - x$value.0.1
hist(d)
fname = file.path(resdir, "ICC_Results.Rda")
load(fname)
resdir = file.path(getwd(), "results")
fname = file.path(resdir, "ICC_Results.Rda")
load(fname)
dir()
resdir = file.path(dirname(getwd()), "results")
fname = file.path(resdir, "ICC_Results.Rda")
load(fname)
icc.cis
source('~/.active-rstudio-document', echo=TRUE)
xtab.scan = xtable(sfail_0.01)
xtab.scan
sfail_0.01
sfail_0.01 = sfail_0.01[ , c("Bad.NoGant.sum", "Good.NoGant.sum", "N.NoGant")]
sfail = sfail_0.01[ , c("Bad.NoGant.sum", "N.NoGant", "Bad.NoGant.pct")]
fname = file.path(resdir, "ICC_Results.Rda")
load(fname)
iscen = which(icc.vals$runvol == "truevol" & icc.vals$smooth == TRUE &
icc.vals$int == 0.01)
smod = icc.smods[[iscen]]
npt.icc = smod$ngrps['id']
n.mod = smod$devcomp$dims['n']
Nscans = fail.rates$N.NoGant[1]
stopifnot(all(fail.rates$N.NoGant == fail.rates$N.NoGant[1]))
ncheck = total.N - N.gantry - N.crani
stopifnot(Nscans == ncheck)
reg.icc = icc.vals$ICC[ icc.vals$smooth & icc.vals$runvol == 'truevol']
fail.0.01 = fail.rates[ fail.rates$int == "0.01" & fail.rates$smooth == TRUE, "Bad.NoGant.pct"]
fail.0.01 = round(fail.0.01 * 100, 1)
fail.rates$value = paste0( fail.rates$"Bad.NoGant.sum", " (", round(fail.rates$"Bad.NoGant.pct"*100, 1), "%)")
fail.rates = fail.rates[, c("int", "smooth", "value")]
fail.rates$smooth = c("No", "Yes")[fail.rates$smooth +1]
colnames(fail.rates) = c("Fractional Intensity", "Smoothed", "Failures: N (%)")
fail.tab = reshape(fail.rates, direction ="wide", idvar="Fractional Intensity", timevar = "Smoothed")
colnames(fail.tab)[2:3] = c("Unsmoothed", "Smoothed")
xtab = xtable(fail.tab, caption = paste0("{\\bf Failure Rates for each Processing Pipeline of Brain Extraction of the ", Nscans, " Scans Analyzed.}"), label="tab:fail", align = "lcr|r")
addtorow <- list()
addtorow$pos <- list()
addtorow$pos[[1]] <- -1
addtorow$command <- paste0("\\hline & \\multicolumn{2}{c}{Failure Scans: N (\\%)} \\\\")
sfail = sfail_0.01[ , c("Bad.NoGant.sum", "N.NoGant", "Bad.NoGant.pct")]
colnames(sfail) = c("bad", "all", "pct")
sfail$pct = round(sfail$pct * 100, 1)
sfail
sfail_0.01
sfail = sfail_0.01[ , c("manu", "Bad.NoGant.sum", "N.NoGant", "Bad.NoGant.pct")]
colnames(sfail) = c("Scanner", "bad", "all", "pct")
sfail$pct = round(sfail$pct * 100, 1)
sfail
sfail = sfail_0.01[ , c("manu", "Bad.NoGant.sum", "N.NoGant", "Bad.NoGant.pct")]
colnames(sfail) = c("Scanner", "bad", "all", "pct")
sfail$Scanner[sfail$Scanner == 'TOSHIBA'] = "Toshiba"
sfail$Scanner[sfail$Scanner == 'SIEMENS'] = "Siemens"
sfail$Scanner[sfail$Scanner == 'NeuroLogica'] = "Neurologica"
sfail$pct = round(sfail$pct * 100, 1)
sfail
sfail$value = paste0( sfail$bad, "/", sfail$all, " (", sfail$pct, "%)")
sfail
sfail = sfail_0.01[ , c("manu", "Bad.NoGant.sum", "N.NoGant", "Bad.NoGant.pct")]
colnames(sfail) = c("Scanner", "bad", "all", "pct")
sfail$Scanner[sfail$Scanner == 'TOSHIBA'] = "Toshiba"
sfail$Scanner[sfail$Scanner == 'SIEMENS'] = "Siemens"
sfail$Scanner[sfail$Scanner == 'NeuroLogica'] = "Neurologica"
sfail$pct = sprintf("%03.1f", sfail$pct * 100)
sfail
sfail$value = paste0( sfail$bad, "/", sfail$all, " (", sfail$pct, "%)")
sfail
sfail = sfail_0.01[ , c("manu", "Bad.NoGant.sum", "N.NoGant", "Bad.NoGant.pct")]
colnames(sfail) = c("Scanner", "bad", "all", "pct")
sfail$Scanner[sfail$Scanner == 'TOSHIBA'] = "Toshiba"
sfail$Scanner[sfail$Scanner == 'SIEMENS'] = "Siemens"
sfail$Scanner[sfail$Scanner == 'NeuroLogica'] = "Neurologica"
sfail$pct = sprintf("%03.1f", sfail$pct * 100)
sfail$Failure = paste0( sfail$bad, "/", sfail$all, " (", sfail$pct, "%)")
sfail = sfail_0.01[ , c("manu", "Bad.NoGant.sum", "N.NoGant", "Bad.NoGant.pct")]
colnames(sfail) = c("Scanner", "bad", "all", "pct")
sfail$Scanner[sfail$Scanner == 'TOSHIBA'] = "Toshiba"
sfail$Scanner[sfail$Scanner == 'SIEMENS'] = "Siemens"
sfail$Scanner[sfail$Scanner == 'NeuroLogica'] = "Neurologica"
sfail$pct = sprintf("%03.1f", sfail$pct * 100)
sfail$Failure = paste0( sfail$bad, "/", sfail$all, " (", sfail$pct, "%)")
sfail = sfail[, c("Scanner", "Failure")]
colnames(sfail) = c("Scanner Type", "Failure Rate")
sfail
xtab.scan = xtable(sfail, caption = paste0("{\\bf Failure Rates for Different Scanner Types using Smoothed Data and an FI of $0.01$ Processing Pipeline of Brain Extraction of the ", Nscans, " Scans Analyzed.}"), label="tab:sfail", align = "lcr")
xtab.scan
print.xtable(xtab.scan, type="latex", hline.after = c(0,nrow(xtab)), include.rownames=FALSE)
sfail
sfail_0.01
stab = sfail_0.01[, c("Bad.NoGant.sum", "Good.NoGant.sum")]
fisher.test(stab)
stab
class(stab) = "table"
fisher.test(stab)
stag
stab
stab = sfail_0.01[, c("Bad.NoGant.sum", "Good.NoGant.sum")]
fish.stab = fisher.test(stab)
fisher.test(stab)f
fisher.test(stab)
chisq.test(stab)
stab
sfail
Neurologica
fish.stab
fish.stab$p.value
sprintf("04.3f", fish.stab$p.value)
sprintf("%04.3f", fish.stab$p.value)
stab
stab = sfail_0.01[, c("Bad.NoGant.sum", "Good.NoGant.sum")]
sfail_0.01
rownames(stab) = sfail_0.01$manu
stab
fisher.test(stab)
fisher.test(stab[ rownames(stab) != "Picker", ])
