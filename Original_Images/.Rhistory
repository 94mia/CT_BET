swirlify
q('no')
library(swirlify)
install.packages("colorout")
system.file("")
system.file("", package="help")
system.file("", package="base")
.libPaths
.libPaths()
source("http://rtm.wustl.edu/code/sendEmail.R")
source("http://rtm.wustl.edu/code/sendEmail.R")
sendEmail
install.packagesupdate.packages(checkBuilt=TRUE, ask=FALSE)
update.packages(checkBuilt=TRUE, ask=FALSE)
library(mgcv)
help("mgcv-package")
?gam
?nlme
help("mgcv-package")
?gammm
?gamm
?gamm
?gamm4
help(package="gamm4")
?ga
?gam
?smooth.construct.ad.smooth.spec
?smooth.construct.cc.smooth.spec
?smooth.construct.cr.smooth.spec
?smooth.construct.cp.smooth.spec
?smooth.construct.cp.smooth.spec
?smooth.construct.cr.smooth.spec
?smooth.construct.cc.smooth.spec
?smooth.construct.cs.smooth.spec
?smooth.construct.ds.smooth.spec
?smooth.construct.fs.smooth.spec
?smooth.construct.mrf.smooth.spec
?smooth.construct.tp.smooth.spec
?smooth.construct.ts
?smooth.construct.ts.smooth.spec
?smooth.construct.tensor.smooth.spec
?smooth.construct.sw.smooth.spec
?smooth.construct.sos.smooth.spec
?smooth.construct.sf.smooth.spec
?smooth.construct.re.smooth.spec
?smooth.construct.ps.smooth.spec
?smooth.construct.sf.smooth.spec
?termplot
require(graphics)
had.splines <- "package:splines" %in% search()
if(!had.splines) rs <- require(splines)
x <- 1:100
z <- factor(rep(LETTERS[1:4], 25))
y <- rnorm(100, sin(x/10)+as.numeric(z))
model <- glm(y ~ ns(x, 6) + z)
par(mfrow = c(2,2)) ## 2 x 2 plots for same model :
termplot(model, main = paste("termplot( ", deparse(model$call)," ...)"))
?termplot
par(mfrow = c(2,2)) ## 2 x 2 plots for same model :
termplot(model, main = paste("termplot( ", deparse(model$call)," ...)"))
termplot(model, rug = TRUE)
termplot(model, partial.resid = TRUE, se = TRUE, main = TRUE)
termplot(model, partial.resid = TRUE, smooth = panel.smooth, span.smth = 1/4)
if(!had.splines && rs) detach("package:splines")
par(mfrow = c(2,2)) ## 2 x 2 plots for same model :
termplot(model, main = paste("termplot( ", deparse(model$call)," ...)"))
termplot(model, rug = TRUE)
par(mfrow = c(2,2)) ## 2 x 2 plots for same model :
termplot(model, partial.resid = TRUE, se = TRUE, main = TRUE)
termplot(model, partial.resid = TRUE, smooth = panel.smooth, span.smth = 1/4)
if(!had.splines && rs) detach("package:splines")
par(mfrow = c(2,2)) ## 2 x 2 plots for same model :
termplot(model, partial.resid = TRUE, se = TRUE, main = TRUE)
termplot(model, partial.resid = TRUE, smooth = panel.smooth, span.smth = 1/4)
if(!had.splines && rs) detach("package:splines")
df = data.frame(x = 1:3, y= c("hey", "ho", "go"), z= 200:202)
write.csv(df, include.rownames=FALSE)
swirl()
rm(list=ls())
df = data.frame(x = 1:3, y= c("hey", "ho", "go"), z= 200:202)
# write.csv(df, file="temp.csv" row.names=FALSE)
library(swirl)
swirl()
sum(df$x == 2)
sum(df$x == 4)
sum(df$y == "hey")
sum(df$x[df$y == "hey"])
sum(df$x[df$y %in% c("hey", "ho")])
df = data.frame(x = 1:3, y= c("hey", "ho", "go"), z= 200:202)
names(df)
names(df)[1] = "blah"
df$x
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "R_Is_A_Language"
mytitle <- 'R is a Language: Treat it Like One'
#   categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
publish = TRUE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
system(sprintf("open %s", rmdname))
}
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "R_Is_A_Language"
mytitle <- 'R is a Language: Treat it Like One'
#   categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
publish = TRUE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
system(sprintf("open %s", rmdname))
}
######### Send it to the Website
if (wp){
if (!require('RWordPress'))
install.packages('RWordPress',
repos = 'http://www.omegahat.org/R',
type = 'source')
library(RWordPress)
pwd = 'hopkinsstat'
stopifnot(pwd != 'PWD')
options(WordpressLogin = c(strictlystat = pwd))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = 'http://hopstat.wordpress.com/xmlrpc.php')
### change this for the new folder
stopifnot(file.exists(rmdname))
opts_knit$set(base.dir = wpdir)
#   opts_knit$set(
#     base.url = paste0(
#       'https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
#                 base.dir = wpdir)
opts_knit$set(upload.fun = imgur_upload,
base.url = NULL) # upload all images to imgur.com
knit2wp(rmdname,
title = mytitle, categories = categories,
shortcode=TRUE,
publish=publish)
}
q('no')
install.packages("Rcmdr", dependencies=TRUE)
library(Rcmdr)
data(cars)
library(Rcmdr)
library(Rcmdr)
q('no')
source('~/Dropbox/CTR/DHanley/CT_Registration/programs/ROI/Permutation_R2.R')
#################################
# Regressions with % of ROI
# Author: John Muschelli
#################################
rm(list=ls())
library(cttools)
library(scales)
library(RColorBrewer)
library(data.table)
library(ggplot2)
library(grid)
library(plyr)
homedir = "/Applications"
rootdir = "~/CT_Registration"
basedir = file.path(rootdir, "data")
outdir = basedir
if (Sys.info()[["user"]] %in% "jmuschel") {
homedir = "~"
rootdir = "/dexter/disk2/smart/stroke_ct/ident"
basedir = file.path(rootdir, "Registration")
outdir = file.path(basedir, "results")
}
progdir = file.path(rootdir, "programs")
tempdir = file.path(rootdir, "Template")
atlasdir = file.path(tempdir, "atlases")
whichdir = "reoriented"
outcome = "NIHSS"
adder = paste0(outcome, "_")
if (outcome == "NIHSS"){
adder = ""
}
get.id = function(x){
ss = strsplit(x, "_")
ss = sapply(ss, head, 1)
ss = gsub(".*(\\d\\d\\d-.*)", "\\1", ss)
ss
}
id_to_pname = function(x){
as.numeric(gsub("-", "", x))
}
nkeeps = c(1000, 2000, 3000, .001, 0.01, 0.05)
demog = read.csv(file=file.path(basedir, "Demog_NIHSS_Mask.csv"),
stringsAsFactors=FALSE)
demog$Base_ICH_10 = demog$Diagnostic_ICH /10
measures  = c("adj.r.squared", "r.squared", "sigma")
reses = vector("list", length=length(measures))
names(reses) = measures
epics = aics = reses
if (outcome == "GCS") {
demog$Y = demog$Enrollment_GCS_Add
} else if (outcome == "NIHSS"){
demog$Y = demog$Enrollment_NIHSS_Total
} else {
stop(paste0("Outcome ", outcome, " not implemented"))
}
demog$Clot_Location_RC = gsub("Palidus", "Pallidus",
demog$Clot_Location_RC )
demog$Clot_Location_RC = factor(demog$Clot_Location_RC,
levels= c("Lobar", "Globus Pallidus", "Putamen", "Thalamus"))
demog$LOC = demog$Clot_Location_RC
cc = complete.cases(demog$Y)
demog = demog[cc,]
zform = ~ Age + Sex + Diagnostic_ICH
# Z = model.matrix(object = zform, data = demog)
# Z = model.matrix(object = zform, data = demog)
outfile = file.path(outdir, "Voxel_Matrix.Rda")
load(file=outfile )
B = 1000
Y = sapply(seq(B), function(x){
sample(demog$Y)
})
#### keeping if over 10 people have ICH in that locaiton
ncut = 10
all.nvox = sum(rs > 0)
rs
load("/Users/johnmuschelli/Dropbox/CTR/DHanley/CT_Registration/CT_Pipeline/Simulation/Voxel_Matrix.Rda")
outdir
rs
source('~/Dropbox/CTR/DHanley/CT_Registration/programs/ROI/Permutation_R2.R')
source('~/Dropbox/CTR/DHanley/CT_Registration/programs/ROI/Permutation_R2.R')
check.mod$p.val
names(check.mod)
head(check.mod$p.val)
length(orig.Y)
dim(X)
source('~/Dropbox/CTR/DHanley/CT_Registration/programs/ROI/Permutation_R2.R')
library(limma)
.Platform$GUI
ls()
req
.Platform$GUI == "X11"
.Platform$GUI
q('')
q('no')
f = pipe("uname")
readLines(f)
close(f); rm(f)
??shell
??interactive
?interactive
interactive()
interactive
Sys.getenv("R_USER")
.Platform()
.Platform
.Machine
q('no')
dev.cur()
.Platform$GUI
sessionInfo()
capabilities()
ys.getenv("DISPLAY")
Sys.getenv("DISPLAY")
x = Sys.getenv()
head(x)
tail(x)
names(x)
names(x)
Sys.getenv("TERM")
q('no')
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "Different R Profile on GUI Startup"
folname = gsub(" ", "_", folname)
mytitle <- '"Different R Profile on GUI Startup"'
#   categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
publish = TRUE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
system(sprintf("open %s", rmdname))
}
library(swirl)
swirl()
swirl()
swirl()
swirl()
kx
x
q('no')
library(slidify)
addtxt = paste0("```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=FALSE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment=""', "results='hide'", "```")
cat(addtxt)
addtxt = paste0("```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=FALSE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment=""', "results='hide')\n", "```")
cat(addtxt)
addtxt = paste0("```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=FALSE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt)
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "Tester"
folname = gsub(" ", "_", folname)
mytitle <- folname
#   categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
publish = TRUE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=FALSE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
system(sprintf("open %s", rmdname))
}
source('~/.active-rstudio-document', echo=TRUE)
if (interactive){
rm(list=ls())
}
if (interactive()){
rm(list=ls())
}
library(knitr)
opts_chunk$set(echo=FALSE, prompt=FALSE, message=FALSE, warning=FALSE, comment="", results='hide')
opts
x = 5
ls()
if (interactive()){
rm(list=ls())
}
x
library(ROCR)
?prediction
library(ROCR)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf)
abline(a=0, b=1)
perf@x.values
dist(perf@y.values, perf@x.values)
dist(perf@y.values[[1]], perf@x.values[[1]])
?dist
d = (perf@y.values[[1]]- perf@x.values[[1]])^2
d
which.max(d)
which(d == max(d))
m = which.max(d)
perf@x.values[[1]][m]
perf@y.values[[1]][m]
plot(perf)
abline(v=perf@x.values[[1]][m])
help(package="ROCR")
data(ROCR.xval)
pred <- prediction(ROCR.xval$predictions, ROCR.xval$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf,col="grey82",lty=3)
perf@x.values
length(perf@x.values)
length(perf@y.values)
sapply(perf, function(x){})
sapply(perf, function(x){
help(package="ROCR")
mapply(FUN=function(x, y){})
mapply(FUN=function(x, y){
d = (x-y)^2
ind = which(d == max(d))
}, perf@x.values, perf@y.values)
mapply(FUN=function(x, y){
d = (x-y)^2
ind = which(d == max(d))
}, perf@x.values, perf@y.values)
mapply(FUN=function(x, y){
d = x^2 + (y-1)^2
ind = which(d == min(d))
}, perf@x.values, perf@y.values)
library(ROCR)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf)
library(ROCR)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf, xlim=c(0, .1))
?performance
library(ROCR)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf)
abline(a=0, b=1)
accur = performance(pred, "acc")
accur@y.values[[1]]
auc = performance(pred,"auc")
pauc = performance(pred,"auc", fpr.stop = .1)
pauc
citation("pROC")
install.packages('pROC')
citation("pROC")
library(pROC)
help(package="pROC")
library(ROCR)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
library(pROC)
data(aSAH)
roc1 <- roc(aSAH$outcome, aSAH$s100b)
roc2 <- roc(aSAH$outcome, aSAH$wfns)
roc.test(roc1, roc2)
help(package="pROC")
?roc.test
roc3 <- roc(aSAH$outcome, aSAH$s100b, partial.auc=c(1, 0.8), partial.auc.focus="se")
roc4 <- roc(aSAH$outcome, aSAH$wfns, partial.auc=c(1, 0.8), partial.auc.focus="se")
roc.test(roc3, roc4)
roc3 <- roc(aSAH$outcome, aSAH$s100b, partial.auc=c(0.8, 1), partial.auc.focus="se")
roc4 <- roc(aSAH$outcome, aSAH$wfns, partial.auc=c(0.8 ,1), partial.auc.focus="se")
roc.test(roc3, roc4)
roc3 <- roc(aSAH$outcome, aSAH$s100b, partial.auc=c(0.8, 1), partial.auc.focus="se")
roc4 <- roc(aSAH$outcome, aSAH$wfns, partial.auc=c(0.8 ,1), partial.auc.focus="se")
roc.test(roc3, roc4)
roc3 <- roc(aSAH$outcome, aSAH$s100b, partial.auc=c(0.8, 1))
#, partial.auc.focus="se")
roc4 <- roc(aSAH$outcome, aSAH$wfns, partial.auc=c(0.8 ,1)),
# partial.auc.focus="se")
roc.test(roc3, roc4)
roc3 <- roc(aSAH$outcome, aSAH$s100b, partial.auc=c(0.8, 1))
#, partial.auc.focus="se")
roc4 <- roc(aSAH$outcome, aSAH$wfns, partial.auc=c(0.8 ,1))
#, partial.auc.focus="se")
roc.test(roc3, roc4)
roc3 <- roc(aSAH$outcome, aSAH$s100b, partial.auc=c(0.8, 1))
roc4 <- roc(aSAH$outcome, aSAH$wfns, partial.auc=c(0.8 ,1))
roc.test(roc3, roc4)
roc3 <- roc(aSAH$outcome, aSAH$s100b)
roc4 <- roc(aSAH$outcome, aSAH$wfns)
roc.test(roc3, roc4)
roc3 <- roc(aSAH$outcome, aSAH$s100b)
roc4 <- roc(aSAH$outcome, aSAH$wfns)
roc.test(roc3, roc4)
slotNames(perf)
library(ROCR)
?performance
library(ROCR)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"tpr","fpr")
slotNames(perf)
getSlots(perf)
slotNames(perf, "x.name")
getSlots(perf, "x.name")
?getSlots
slot(perf, "x.name")
slot(perf, "y.name")
slot(perf, "y.values")
q('no')
library(knitr)
?knit2html
?knit2pdf
q()
source('~/Dropbox/CTR/DHanley/CT_Registration/Final_Brain_Seg/programs/Convert_DCM.R')
