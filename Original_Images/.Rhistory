writeFile = FALSE
if (retimg){
if (is.null(outfile)) {
outfile = paste0(tempfile(), ".nii.gz")
} else {
writeFile = TRUE
}
} else {
stopifnot(!is.null(outfile))
}
### check if other files are there
have.other = FALSE
if (!is.null(other.files)){
have.other = TRUE
lother = length(other.files)
lout = length(other.outfiles)
if (lother != lout) {
stopifnot("Other outfile and infiles must be same length")
}
}
#### should warp be removed
if (!remove.warp){
stopifnot(!is.null(outprefix))
} else {
outprefix = tempfile()
}
t1 <- antsImageRead(filename, 3)
retimg = TRUE
library(ANTsR)
#### setup files
writeFile = FALSE
if (retimg){
if (is.null(outfile)) {
outfile = paste0(tempfile(), ".nii.gz")
} else {
writeFile = TRUE
}
} else {
stopifnot(!is.null(outfile))
}
### check if other files are there
have.other = FALSE
if (!is.null(other.files)){
have.other = TRUE
lother = length(other.files)
lout = length(other.outfiles)
if (lother != lout) {
stopifnot("Other outfile and infiles must be same length")
}
}
#### should warp be removed
if (!remove.warp){
stopifnot(!is.null(outprefix))
} else {
outprefix = tempfile()
}
t1 <- antsImageRead(filename, 3)
remove.warp = TRUE
outfile = t1.ofile
#### setup files
writeFile = FALSE
if (retimg){
if (is.null(outfile)) {
outfile = paste0(tempfile(), ".nii.gz")
} else {
writeFile = TRUE
}
} else {
stopifnot(!is.null(outfile))
}
### check if other files are there
have.other = FALSE
if (!is.null(other.files)){
have.other = TRUE
lother = length(other.files)
lout = length(other.outfiles)
if (lother != lout) {
stopifnot("Other outfile and infiles must be same length")
}
}
#### should warp be removed
if (!remove.warp){
stopifnot(!is.null(outprefix))
} else {
outprefix = tempfile()
}
t1 <- antsImageRead(filename, 3)
skull_stripfile
ext = get.imgext()
bet_file = tempfile()
x = fslbet(infile = filename,
outfile = bet_file,
opts = bet.opts,
betcmd = betcmd, retimg= FALSE)
bet_maskfile = paste0(bet_file, "_mask", ext)
bet_file = paste0(bet_file, ext)
bet = antsImageRead(bet_file, 3)
bet_mask = antsImageRead(bet_maskfile, 3)
if (!is.null(skull_stripfile)){
file.copy(bet_maskfile, skull_stripfile, overwrite = TRUE)
}
filename
betcmd = "bet"
bet.opts = "-B -f 0.1 -v"
dir(tempdir)
dir(tempdir())
file.copy(file.path(tempdir(), "file1288053fa4a89_mask.nii.gz"), skull_stripfile)
bet_file = file.path(tempdir(), "file1288053fa4a89")
ext = get.imgext()
bet_maskfile = paste0(bet_file, "_mask", ext)
bet_file = paste0(bet_file, ext)
bet = antsImageRead(bet_file, 3)
bet_mask = antsImageRead(bet_maskfile, 3)
t1N3 <- antsImageClone(t1)
other.imgs = lapply(other.files, antsImageRead,
dimension = 3)
N3.oimgs = lapply(other.imgs, antsImageClone)
t1N3 = maskImage(t1N3, bet_mask)
i = 1
N3.oimgs[[i]] = maskImage(N3.oimgs[[i]], bet_mask)
t1N3
N3.oimgs[[i]]
bet_mask
?maskImage
maskImage
img.in = N3.oimgs[[i]]
img.mask = bet_mask
img.out[img.mask != level] <- 0
level = 1
img.out <- antsImageClone(img.in)
img.out[img.mask != level] <- 0
img.mask != level
img.out <- antsImageClone(img.in)
img.out[ which(img.mask != level)] <- 0
img.out <- antsImageClone(img.in)
img.out[ img.mask != level] <- 0
dim(img.out)
dim(img.mask)
q('no')
#### Test out OASIS pipeline
rm(list=ls())
library(fslr)
library(extrantsr)
#### Test out OASIS pipeline
rm(list=ls())
library(fslr)
library(extrantsr)
library(ANTsR)
homedir = path.expand("~/Dropbox/FSLR")
datadir = file.path(homedir, "data")
resdir = file.path(homedir, "figure")
options(fsl.path="/usr/local/fsl")
options(fsl.outputtype = "NIFTI_GZ")
t1.file = file.path(datadir, "01-Baseline_T1.nii.gz" )
other.files = file.path(datadir,
paste0("01-Baseline_",
c("T2", "FLAIR", "PD"), ".nii.gz")
)
t1.ofile = file.path(datadir, "01-Baseline_T1_OASIS.nii.gz" )
other.outfiles = gsub("[.]nii", "_OASIS.nii", other.files)
normalize_file = file.path(datadir, "01-Baseline_T1_WhiteStripe" )
skull_stripfile = file.path(datadir, "01-Baseline_T1_OASIS_BET.nii.gz" )
reg.t1 = oasis(filename = t1.file,
skull_strip = TRUE,
n3correct = TRUE,
normalize = TRUE,
normalize_file = normalize_file,
outfile = t1.ofile,
other.files = other.files,
other.outfiles = other.outfiles
)
rm(list=ls())
## this chunk is real special; allows me VIP access to THE John Muschelli's private CTTools
library(devtools)
options(fsl.path="/usr/local/fsl")  ## need to put this in for fsl on local machine.
# install_github("cttools", username="muschellij2", auth_user="swihart",
#                auth_token="2c0bd630bc0c2bd8d66d155d7af1885022da68a3")
library(cttools)
library(fslr)
##options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
## Note:  matlab.path is for the tilt; it looks as that the DICOM lung files
## were not taken as a tilt.  John opened up some characteristic file in Osirix and confirmed it.
## Need to ask him exactly what and how that was confirmed.
user = Sys.info()[["user"]]
if ( grepl("musch", user)) {
rootdir = "~/Dropbox/_LoriLungs (3)/"
} else {
rootdir = "~/Desktop/_LoriLungs"
}
## need ABSOLUTE path (relative breaks code)
rootdir = path.expand(rootdir)
# basedir = file.path(rootdir, "NIfTI")
basedir = file.path(rootdir, "S1_ROIs")
fname = file.path(basedir, "S1_ROIs")
img = readNIfTI(fname, reorient = FALSE)
head(img)
uimg = unique(c(img))
uimg
uimg = sort(unique(c(img)))
uimg
rm(list=ls())
## this chunk is real special; allows me VIP access to THE John Muschelli's private CTTools
library(devtools)
options(fsl.path="/usr/local/fsl")  ## need to put this in for fsl on local machine.
# install_github("cttools", username="muschellij2", auth_user="swihart",
#                auth_token="2c0bd630bc0c2bd8d66d155d7af1885022da68a3")
library(cttools)
library(fslr)
##options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
## Note:  matlab.path is for the tilt; it looks as that the DICOM lung files
## were not taken as a tilt.  John opened up some characteristic file in Osirix and confirmed it.
## Need to ask him exactly what and how that was confirmed.
user = Sys.info()[["user"]]
if ( grepl("musch", user)) {
rootdir = "~/Dropbox/_LoriLungs (3)/"
} else {
rootdir = "~/Desktop/_LoriLungs"
}
## need ABSOLUTE path (relative breaks code)
rootdir = path.expand(rootdir)
# basedir = file.path(rootdir, "NIfTI")
basedir = file.path(rootdir, "S1_ROIs")
fname = file.path(basedir, "S1_ROIs")
img = readNIfTI(fname, reorient = FALSE)
uimg = sort(unique(c(img)))
uimg = uimg[ !(uimg %in% c(0)) ]
uimg
ival  = uimg[1]
out.fname = paste0(fname, "_", ival)
mask = img == ival
newnii
?datatype
convert.datatype
convert.datatype()
mask = newnii(img == ival, type_string = "UINT8")
mask
convert.bitpix()
?writeNIfTI
rm(list=ls())
## this chunk is real special; allows me VIP access to THE John Muschelli's private CTTools
library(devtools)
options(fsl.path="/usr/local/fsl")  ## need to put this in for fsl on local machine.
# install_github("cttools", username="muschellij2", auth_user="swihart",
#                auth_token="2c0bd630bc0c2bd8d66d155d7af1885022da68a3")
library(cttools)
library(fslr)
##options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
## Note:  matlab.path is for the tilt; it looks as that the DICOM lung files
## were not taken as a tilt.  John opened up some characteristic file in Osirix and confirmed it.
## Need to ask him exactly what and how that was confirmed.
user = Sys.info()[["user"]]
if ( grepl("musch", user)) {
rootdir = "~/Dropbox/_LoriLungs (3)/"
} else {
rootdir = "~/Desktop/_LoriLungs"
}
## need ABSOLUTE path (relative breaks code)
rootdir = path.expand(rootdir)
# basedir = file.path(rootdir, "NIfTI")
basedir = file.path(rootdir, "S1_ROIs")
fname = file.path(basedir, "S1_ROIs")
img = readNIfTI(fname, reorient = FALSE)
uimg = sort(unique(c(img)))
uimg = uimg[ !(uimg %in% c(0)) ]
ival  = uimg[1]
for (ival in uimg){
out.fname = paste0(fname, "_", ival)
mask = newnii(img == ival, type_string = "UINT8")
writeNIfTI(mask, filename = out.fname)
print(ival)
}
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
options(fsl.path='/usr/local/fsl')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/Dropbox/CTR/DHanley/CT_Registration")
ROIformat = FALSE
study = "Original_Images"
if (ROIformat) {
study = "ROI_images"
}
homedir <- file.path(rootdir, "Final_Brain_Seg", study)
#basedir <- file.path("/Volumes/CT_Data/MISTIE")
setwd(homedir)
ids = list.dirs(homedir, recursive=FALSE, full.names=FALSE)
ids = basename(ids)
ids = grep("\\d\\d\\d-(\\d|)\\d\\d\\d", ids, value=TRUE)
length(ids)
iid = 2
id <- ids[iid]
basedir = file.path(homedir, id)
ssdir = file.path(basedir, "Skull_Stripped")
if (!file.exists(ssdir)){
dir.create(ssdir)
}
print(id)
### time for convertsion
contime <- NULL
gf = getfiles(basedir)
# t = iconv("UTF-8","UTF-8//IGNORE",$t);
verbose =TRUE
untar = FALSE
convert <- TRUE
skullstrip <- TRUE
plotss = TRUE
regantry <- FALSE
untgantry <- FALSE
runall <- TRUE
useRdcmsort= TRUE
useRdcm2nii= FALSE
removeDups = TRUE
isSorted = NULL
if (ROIformat) isSorted = FALSE
dcm2niicmd = "dcm2nii_2009"
?convert_DICOM
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
options(fsl.path='/usr/local/fsl')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/Dropbox/CTR/DHanley/CT_Registration")
ROIformat = FALSE
study = "Original_Images"
if (ROIformat) {
study = "ROI_images"
}
homedir <- file.path(rootdir, "Final_Brain_Seg", study)
#basedir <- file.path("/Volumes/CT_Data/MISTIE")
setwd(homedir)
ids = list.dirs(homedir, recursive=FALSE, full.names=FALSE)
ids = basename(ids)
ids = grep("\\d\\d\\d-(\\d|)\\d\\d\\d", ids, value=TRUE)
length(ids)
iid = 2
id <- ids[iid]
basedir = file.path(homedir, id)
ssdir = file.path(basedir, "Skull_Stripped")
if (!file.exists(ssdir)){
dir.create(ssdir)
}
print(id)
### time for convertsion
contime <- NULL
gf = getfiles(basedir)
# t = iconv("UTF-8","UTF-8//IGNORE",$t);
verbose =TRUE
untar = FALSE
convert <- TRUE
skullstrip <- TRUE
plotss = TRUE
regantry <- FALSE
untgantry <- FALSE
runall <- TRUE
useRdcmsort= TRUE
useRdcm2nii= FALSE
removeDups = TRUE
isSorted = NULL
if (ROIformat) isSorted = FALSE
dcm2niicmd = "dcm2nii_2009"
if ( length(gf$files) > 0 | untar){
contime <- system.time(convert_DICOM(basedir,
verbose=verbose, untar=untar,
useRdcmsort= useRdcmsort,
useRdcm2nii= useRdcm2nii,
id = id,
isSorted = isSorted,
removeDups=removeDups,
dcmsortopt=dcmsortopt,
ROIformat = ROIformat,
dcm2niicmd=dcm2niicmd))
#     gt_correct=TRUE,
#     add.img.dir=FALSE
}
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
options(fsl.path='/usr/local/fsl')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/Dropbox/CTR/DHanley/CT_Registration")
ROIformat = TRUE
study = "Original_Images"
if (ROIformat) {
study = "ROI_images"
}
homedir <- file.path(rootdir, "Final_Brain_Seg", study)
#basedir <- file.path("/Volumes/CT_Data/MISTIE")
setwd(homedir)
ids = list.dirs(homedir, recursive=FALSE, full.names=FALSE)
ids = basename(ids)
ids = grep("\\d\\d\\d-(\\d|)\\d\\d\\d", ids, value=TRUE)
length(ids)
iid = 2
ROIformat
id <- ids[iid]
basedir = file.path(homedir, id)
ssdir = file.path(basedir, "Skull_Stripped")
if (!file.exists(ssdir)){
dir.create(ssdir)
}
print(id)
### time for convertsion
contime <- NULL
gf = getfiles(basedir)
# t = iconv("UTF-8","UTF-8//IGNORE",$t);
verbose =TRUE
untar = FALSE
convert <- TRUE
skullstrip <- TRUE
plotss = TRUE
regantry <- FALSE
untgantry <- FALSE
runall <- TRUE
useRdcmsort= TRUE
useRdcm2nii= FALSE
removeDups = TRUE
isSorted = NULL
if (ROIformat) isSorted = FALSE
dcm2niicmd = "dcm2nii_2009"
if ( length(gf$files) > 0 | untar){
contime <- system.time(convert_DICOM(basedir,
verbose=verbose, untar=untar,
useRdcmsort= useRdcmsort,
useRdcm2nii= useRdcm2nii,
id = id,
isSorted = isSorted,
removeDups=removeDups,
dcmsortopt=dcmsortopt,
ROIformat = ROIformat,
dcm2niicmd=dcm2niicmd))
#     gt_correct=TRUE,
#     add.img.dir=FALSE
}
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
options(fsl.path='/usr/local/fsl')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/Dropbox/CTR/DHanley/CT_Registration")
ROIformat = FALSE
study = "Original_Images"
if (ROIformat) {
study = "ROI_images"
}
homedir <- file.path(rootdir, "Final_Brain_Seg", study)
#basedir <- file.path("/Volumes/CT_Data/MISTIE")
setwd(homedir)
ids = list.dirs(homedir, recursive=FALSE, full.names=FALSE)
ids = basename(ids)
ids = grep("\\d\\d\\d-(\\d|)\\d\\d\\d", ids, value=TRUE)
length(ids)
iid = 2
id <- ids[iid]
basedir = file.path(homedir, id)
ssdir = file.path(basedir, "Skull_Stripped")
if (!file.exists(ssdir)){
dir.create(ssdir)
}
print(id)
### time for convertsion
contime <- NULL
gf = getfiles(basedir)
# t = iconv("UTF-8","UTF-8//IGNORE",$t);
verbose =TRUE
untar = FALSE
convert <- TRUE
skullstrip <- TRUE
plotss = TRUE
regantry <- FALSE
untgantry <- FALSE
runall <- TRUE
useRdcmsort= TRUE
useRdcm2nii= FALSE
removeDups = TRUE
isSorted = NULL
if (ROIformat) isSorted = FALSE
dcm2niicmd = "dcm2nii_2009"
if ( length(gf$files) > 0 | untar){
contime <- system.time(convert_DICOM(basedir,
verbose=verbose, untar=untar,
useRdcmsort= useRdcmsort,
useRdcm2nii= useRdcm2nii,
id = id,
isSorted = isSorted,
removeDups=removeDups,
dcmsortopt=dcmsortopt,
ROIformat = ROIformat,
dcm2niicmd=dcm2niicmd))
#     gt_correct=TRUE,
#     add.img.dir=FALSE
}
mid.folder = function(x, folname = ""){
d = dirname(x)
b = basename(x)
file.path(d, folname, b)
}
